liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python MLP.py --learner adam --batch_size_random 1280000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', len_latent=32, lr=0.001, path='Data/movielens/', reg_layers='[0,0,0,0]', verbose=1) 
Load data done [32.0 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Iteration 0 [12.8 s]: NDCG = 0.713850, loss = 0.413905 [19.34 s]
Iteration 1 [10.2 s]: NDCG = 0.713941, loss = 0.400590 [19.47 s]
Iteration 2 [10.0 s]: NDCG = 0.715113, loss = 0.394255 [19.23 s]
Iteration 3 [9.6 s]: NDCG = 0.715431, loss = 0.391980 [19.29 s]
Iteration 4 [9.6 s]: NDCG = 0.718155, loss = 0.389597 [19.46 s]
Iteration 5 [9.8 s]: NDCG = 0.717316, loss = 0.387705 [19.33 s]
Iteration 6 [10.0 s]: NDCG = 0.719184, loss = 0.386823 [19.30 s]
Iteration 7 [9.6 s]: NDCG = 0.719416, loss = 0.386104 [19.22 s]
Iteration 8 [9.8 s]: NDCG = 0.720459, loss = 0.385472 [19.39 s]
Iteration 9 [9.7 s]: NDCG = 0.720432, loss = 0.384124 [19.35 s]
Iteration 10 [9.7 s]: NDCG = 0.721683, loss = 0.383516 [19.29 s]
Iteration 11 [9.8 s]: NDCG = 0.721359, loss = 0.383212 [19.27 s]
Iteration 12 [9.7 s]: NDCG = 0.720554, loss = 0.382875 [19.41 s]
Iteration 13 [10.6 s]: NDCG = 0.720827, loss = 0.382074 [20.23 s]
Iteration 14 [9.8 s]: NDCG = 0.721589, loss = 0.381950 [19.29 s]
Iteration 15 [9.8 s]: NDCG = 0.721025, loss = 0.381395 [19.16 s]
Iteration 16 [9.6 s]: NDCG = 0.722677, loss = 0.381170 [19.23 s]
Iteration 17 [9.7 s]: NDCG = 0.722770, loss = 0.381175 [19.30 s]
Iteration 18 [9.8 s]: NDCG = 0.721248, loss = 0.380173 [19.33 s]
Iteration 19 [9.7 s]: NDCG = 0.722011, loss = 0.380219 [19.06 s]
Iteration 20 [9.8 s]: NDCG = 0.721363, loss = 0.380175 [19.32 s]
Iteration 21 [10.3 s]: NDCG = 0.722614, loss = 0.379527 [19.10 s]
Iteration 22 [11.5 s]: NDCG = 0.723827, loss = 0.379953 [22.53 s]
Iteration 23 [11.5 s]: NDCG = 0.722347, loss = 0.379055 [22.64 s]
Iteration 24 [11.4 s]: NDCG = 0.722895, loss = 0.378697 [22.64 s]
Iteration 25 [11.1 s]: NDCG = 0.722601, loss = 0.378646 [22.52 s]
Iteration 26 [11.3 s]: NDCG = 0.722829, loss = 0.378282 [22.52 s]
Iteration 27 [11.0 s]: NDCG = 0.721877, loss = 0.378353 [22.58 s]
Iteration 28 [11.0 s]: NDCG = 0.721648, loss = 0.378192 [22.58 s]
Iteration 29 [11.0 s]: NDCG = 0.721460, loss = 0.377961 [22.37 s]
Iteration 30 [10.7 s]: NDCG = 0.721204, loss = 0.377899 [22.49 s]
Iteration 31 [10.9 s]: NDCG = 0.720512, loss = 0.377424 [22.54 s]
Iteration 32 [11.0 s]: NDCG = 0.720937, loss = 0.377483 [22.50 s]
Iteration 33 [10.7 s]: NDCG = 0.719749, loss = 0.377310 [22.45 s]
Iteration 34 [10.8 s]: NDCG = 0.720864, loss = 0.377319 [22.60 s]
Iteration 35 [11.0 s]: NDCG = 0.720423, loss = 0.376897 [22.56 s]
Iteration 36 [10.8 s]: NDCG = 0.721484, loss = 0.377109 [22.60 s]
Iteration 37 [11.0 s]: NDCG = 0.720577, loss = 0.377148 [22.66 s]
Iteration 38 [11.2 s]: NDCG = 0.720330, loss = 0.376342 [22.48 s]
Iteration 39 [10.8 s]: NDCG = 0.720853, loss = 0.376951 [22.72 s]
Iteration 40 [10.8 s]: NDCG = 0.721658, loss = 0.376526 [22.63 s]
Iteration 41 [10.9 s]: NDCG = 0.721953, loss = 0.376231 [22.39 s]
Iteration 42 [10.7 s]: NDCG = 0.722280, loss = 0.375826 [22.38 s]
Iteration 43 [11.0 s]: NDCG = 0.723549, loss = 0.375688 [22.55 s]
Iteration 44 [10.6 s]: NDCG = 0.723838, loss = 0.375623 [22.35 s]
Iteration 45 [10.7 s]: NDCG = 0.722450, loss = 0.375682 [22.39 s]
Iteration 46 [10.9 s]: NDCG = 0.724595, loss = 0.375954 [22.66 s]
Iteration 47 [10.8 s]: NDCG = 0.723772, loss = 0.375383 [22.48 s]
Iteration 48 [10.8 s]: NDCG = 0.725935, loss = 0.375860 [22.52 s]
Iteration 49 [10.7 s]: NDCG = 0.724642, loss = 0.375442 [22.64 s]
Iteration 50 [10.9 s]: NDCG = 0.725849, loss = 0.374941 [22.72 s]
Iteration 51 [11.1 s]: NDCG = 0.726080, loss = 0.375033 [22.63 s]
Iteration 52 [11.0 s]: NDCG = 0.726007, loss = 0.374645 [21.76 s]
Iteration 53 [10.3 s]: NDCG = 0.724617, loss = 0.375285 [21.17 s]
Iteration 54 [10.3 s]: NDCG = 0.724975, loss = 0.374659 [22.32 s]
Iteration 55 [10.8 s]: NDCG = 0.726037, loss = 0.375229 [22.43 s]
Iteration 56 [10.8 s]: NDCG = 0.725979, loss = 0.374825 [22.47 s]
Iteration 57 [10.7 s]: NDCG = 0.726538, loss = 0.375112 [22.51 s]
Iteration 58 [10.8 s]: NDCG = 0.726354, loss = 0.374711 [22.52 s]
Iteration 59 [10.9 s]: NDCG = 0.729009, loss = 0.374697 [22.53 s]
Iteration 60 [11.0 s]: NDCG = 0.727664, loss = 0.374563 [22.36 s]
Iteration 61 [10.8 s]: NDCG = 0.728287, loss = 0.374088 [22.51 s]
Iteration 62 [11.0 s]: NDCG = 0.727929, loss = 0.374519 [22.68 s]
Iteration 63 [11.1 s]: NDCG = 0.728940, loss = 0.374353 [22.50 s]
Iteration 64 [11.0 s]: NDCG = 0.727849, loss = 0.374289 [22.48 s]
Iteration 65 [11.3 s]: NDCG = 0.727953, loss = 0.374647 [22.49 s]
Iteration 66 [10.9 s]: NDCG = 0.728514, loss = 0.374186 [22.88 s]
Iteration 67 [10.8 s]: NDCG = 0.728123, loss = 0.374530 [22.39 s]
Iteration 68 [11.2 s]: NDCG = 0.727726, loss = 0.373374 [22.60 s]
Iteration 69 [10.9 s]: NDCG = 0.727733, loss = 0.374377 [22.49 s]
Iteration 70 [10.6 s]: NDCG = 0.727716, loss = 0.374294 [22.52 s]
Iteration 71 [10.9 s]: NDCG = 0.728243, loss = 0.374266 [22.39 s]
Iteration 72 [10.7 s]: NDCG = 0.727840, loss = 0.373824 [22.57 s]
Iteration 73 [10.8 s]: NDCG = 0.727611, loss = 0.373912 [22.68 s]
Iteration 74 [10.9 s]: NDCG = 0.727701, loss = 0.374299 [22.39 s]
Iteration 75 [10.8 s]: NDCG = 0.729108, loss = 0.374097 [22.43 s]
Iteration 76 [10.8 s]: NDCG = 0.729126, loss = 0.373832 [22.55 s]
Iteration 77 [10.7 s]: NDCG = 0.729517, loss = 0.373908 [22.58 s]
Iteration 78 [11.0 s]: NDCG = 0.730813, loss = 0.373048 [22.45 s]
Iteration 79 [11.0 s]: NDCG = 0.729936, loss = 0.373427 [22.96 s]
Iteration 80 [11.3 s]: NDCG = 0.729765, loss = 0.373291 [22.57 s]
Iteration 81 [10.3 s]: NDCG = 0.730258, loss = 0.373517 [21.88 s]
Iteration 82 [11.0 s]: NDCG = 0.730654, loss = 0.373465 [22.66 s]
Iteration 83 [10.9 s]: NDCG = 0.729771, loss = 0.373213 [22.48 s]
Iteration 84 [10.8 s]: NDCG = 0.730245, loss = 0.372962 [22.59 s]
Iteration 85 [11.0 s]: NDCG = 0.731633, loss = 0.373658 [22.50 s]
Iteration 86 [11.3 s]: NDCG = 0.731605, loss = 0.373616 [22.39 s]
Iteration 87 [10.2 s]: NDCG = 0.733518, loss = 0.373347 [21.86 s]
Iteration 88 [11.3 s]: NDCG = 0.732208, loss = 0.373116 [21.47 s]
Iteration 89 [10.3 s]: NDCG = 0.730949, loss = 0.372987 [21.02 s]
Iteration 90 [10.2 s]: NDCG = 0.731942, loss = 0.372939 [21.20 s]
Iteration 91 [10.2 s]: NDCG = 0.731753, loss = 0.373462 [21.16 s]
Iteration 92 [10.2 s]: NDCG = 0.733221, loss = 0.373057 [21.02 s]
Iteration 93 [10.2 s]: NDCG = 0.732274, loss = 0.373287 [21.16 s]
Iteration 94 [10.2 s]: NDCG = 0.732917, loss = 0.373145 [22.18 s]
Iteration 95 [12.4 s]: NDCG = 0.733801, loss = 0.373043 [23.00 s]
Iteration 96 [10.7 s]: NDCG = 0.733190, loss = 0.372787 [22.64 s]
Iteration 97 [10.1 s]: NDCG = 0.733109, loss = 0.372906 [21.49 s]
Iteration 98 [10.9 s]: NDCG = 0.732713, loss = 0.372651 [22.61 s]
Iteration 99 [10.1 s]: NDCG = 0.734570, loss = 0.373065 [22.42 s]
End. Best Iteration 99: NDCG = 0.7346. 


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v4_no_random/MLP.py --learner adam --batch_size_get 3914489 --reg_layers [0,0,0,0]
Using Theano backend.
MLP arguments: Namespace(batch_size_fit=256, batch_size_get=3914489, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, path='Data/movielens/', reg_layers='[0,0,0,0]', verbose=1) 
Load data done [33.7 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Iteration 0 [294.8 s]: NDCG = 0.731969845, loss = 0.331545 [66.86 s]
Iteration 1 [299.1 s]: NDCG = 0.730942807, loss = 0.288351 [62.78 s]
Iteration 2 [297.9 s]: NDCG = 0.730546038, loss = 0.274674 [62.83 s]
Iteration 3 [295.0 s]: NDCG = 0.731269218, loss = 0.267414 [62.38 s]
Iteration 4 [296.9 s]: NDCG = 0.734234833, loss = 0.262876 [61.99 s]
Iteration 5 [303.7 s]: NDCG = 0.733830511, loss = 0.259646 [71.86 s]
Iteration 6 [308.2 s]: NDCG = 0.734029414, loss = 0.257344 [63.48 s]
Iteration 7 [314.6 s]: NDCG = 0.732556557, loss = 0.255540 [71.04 s]
Iteration 8 [316.1 s]: NDCG = 0.732002530, loss = 0.254148 [71.68 s]
Iteration 9 [305.4 s]: NDCG = 0.729403485, loss = 0.252981 [68.89 s]
Iteration 10 [307.9 s]: NDCG = 0.729705499, loss = 0.251959 [66.66 s]
Iteration 11 [308.1 s]: NDCG = 0.730806569, loss = 0.251153 [67.08 s]
Iteration 12 [308.6 s]: NDCG = 0.732992776, loss = 0.250427 [67.51 s]
Iteration 13 [308.9 s]: NDCG = 0.730968784, loss = 0.249759 [67.75 s]
Iteration 14 [309.4 s]: NDCG = 0.731494250, loss = 0.249272 [67.26 s]
Iteration 15 [309.7 s]: NDCG = 0.732249882, loss = 0.248772 [67.10 s]
Iteration 16 [309.5 s]: NDCG = 0.731432438, loss = 0.248303 [62.28 s]
Iteration 17 [301.9 s]: NDCG = 0.731990013, loss = 0.247888 [62.26 s]
Iteration 18 [302.8 s]: NDCG = 0.729589039, loss = 0.247529 [62.63 s]
Iteration 19 [302.5 s]: NDCG = 0.731764993, loss = 0.247212 [62.74 s]
Iteration 20 [303.4 s]: NDCG = 0.730667836, loss = 0.246903 [62.62 s]
Iteration 21 [305.0 s]: NDCG = 0.731445239, loss = 0.246558 [62.57 s]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v4_no_random/MLP.py --learner adam --batch_size_get 15651858 --reg_layers [0,0,0,0]
Using Theano backend.
MLP arguments: Namespace(batch_size_fit=256, batch_size_get=15651858, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, path='Data/movielens/', reg_layers='[0,0,0,0]', verbose=1) 
Load data done [140.9 s]. #user=13679, #item=12922, #train=15651858, #test=316795
Iteration 0 [1164.8 s]: NDCG = 0.725880634, loss = 0.502514 [60.69 s]
Iteration 1 [1175.3 s]: NDCG = 0.725334298, loss = 0.417442 [60.33 s]
Iteration 2 [1167.6 s]: NDCG = 0.725167642, loss = 0.392573 [59.99 s]
Iteration 3 [1168.0 s]: NDCG = 0.726623111, loss = 0.379417 [60.02 s]
Iteration 4 [1158.4 s]: NDCG = 0.724572487, loss = 0.370931 [59.98 s]
Iteration 5 [1159.2 s]: NDCG = 0.726439565, loss = 0.364976 [59.95 s]
Iteration 6 [1156.7 s]: NDCG = 0.724562490, loss = 0.360438 [60.06 s]
Iteration 7 [1157.9 s]: NDCG = 0.725419432, loss = 0.356860 [59.89 s]
Iteration 8 [1158.5 s]: NDCG = 0.725116114, loss = 0.353965 [59.71 s]
Iteration 9 [1160.2 s]: NDCG = 0.725314526, loss = 0.351531 [59.90 s]
Iteration 10 [1161.1 s]: NDCG = 0.724991800, loss = 0.349471 [60.04 s]
Iteration 11 [1167.4 s]: NDCG = 0.725498352, loss = 0.347725 [59.91 s]
Iteration 12 [1161.7 s]: NDCG = 0.725944693, loss = 0.346142 [59.91 s]
Iteration 13 [1161.9 s]: NDCG = 0.724462057, loss = 0.344763 [60.23 s]
Iteration 14 [1161.7 s]: NDCG = 0.726033812, loss = 0.343584 [60.04 s]
Iteration 15 [1162.8 s]: NDCG = 0.725095224, loss = 0.342477 [60.05 s]
Iteration 16 [1172.6 s]: NDCG = 0.725495758, loss = 0.341456 [60.14 s]
Iteration 17 [1166.9 s]: NDCG = 0.725123307, loss = 0.340576 [59.93 s]
Iteration 18 [1164.3 s]: NDCG = 0.726264332, loss = 0.339773 [60.18 s]
Iteration 19 [1164.6 s]: NDCG = 0.724467612, loss = 0.339015 [59.92 s]
Iteration 20 [1166.7 s]: NDCG = 0.724860297, loss = 0.338322 [60.42 s]
Iteration 21 [1166.1 s]: NDCG = 0.725014270, loss = 0.337694 [60.23 s]
Iteration 22 [1166.8 s]: NDCG = 0.724573707, loss = 0.337070 [60.21 s]
Iteration 23 [1166.9 s]: NDCG = 0.725365483, loss = 0.336553 [60.09 s]
Iteration 24 [1166.7 s]: NDCG = 0.726412771, loss = 0.336011 [62.42 s]
Iteration 25 [1166.8 s]: NDCG = 0.724767044, loss = 0.335492 [59.98 s]
Iteration 26 [1167.7 s]: NDCG = 0.725759859, loss = 0.335066 [59.93 s]
Iteration 27 [1168.3 s]: NDCG = 0.724259689, loss = 0.334634 [60.19 s]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --reg_layers [0,0,0,0]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, path='Data/movielens/', reg_layers='[0,0,0,0]', verbose=1) 
Load data done [33.2 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Iteration 0 [93.6 s]: NDCG = 0.732869564, loss = 0.364887 [69.27 s]
Iteration 1 [96.1 s]: NDCG = 0.734482712, loss = 0.327784 [68.36 s]
Iteration 2 [95.4 s]: NDCG = 0.731532350, loss = 0.309514 [69.18 s]
Iteration 3 [94.6 s]: NDCG = 0.734315898, loss = 0.297252 [69.11 s]
Iteration 4 [95.9 s]: NDCG = 0.731594742, loss = 0.289398 [69.49 s]
Iteration 5 [94.3 s]: NDCG = 0.733119261, loss = 0.283429 [68.04 s]
Iteration 6 [93.6 s]: NDCG = 0.733716981, loss = 0.279217 [67.33 s]
Iteration 7 [93.9 s]: NDCG = 0.732342804, loss = 0.275514 [63.69 s]
Iteration 8 [91.4 s]: NDCG = 0.733592027, loss = 0.272924 [61.14 s]
Iteration 9 [91.3 s]: NDCG = 0.731432341, loss = 0.270432 [61.47 s]
Iteration 10 [91.1 s]: NDCG = 0.731648903, loss = 0.267963 [60.90 s]
Iteration 11 [94.8 s]: NDCG = 0.732460467, loss = 0.266284 [65.65 s]
Iteration 12 [96.2 s]: NDCG = 0.731887271, loss = 0.264534 [69.62 s]
Iteration 13 [95.5 s]: NDCG = 0.732925295, loss = 0.263622 [69.28 s]
Iteration 14 [95.7 s]: NDCG = 0.732914336, loss = 0.262186 [69.47 s]
Iteration 15 [95.6 s]: NDCG = 0.731314296, loss = 0.261728 [69.59 s]
Iteration 16 [95.8 s]: NDCG = 0.729928300, loss = 0.259707 [69.79 s]
Iteration 17 [96.0 s]: NDCG = 0.732145267, loss = 0.259693 [69.53 s]
Iteration 18 [95.7 s]: NDCG = 0.729875215, loss = 0.258606 [69.80 s]
Iteration 19 [95.9 s]: NDCG = 0.730745717, loss = 0.257662 [69.81 s]
Iteration 20 [95.9 s]: NDCG = 0.731805257, loss = 0.257264 [69.62 s]
Iteration 21 [96.3 s]: NDCG = 0.731178901, loss = 0.256723 [69.66 s]
Iteration 22 [96.2 s]: NDCG = 0.730455992, loss = 0.255849 [69.90 s]
Iteration 23 [95.9 s]: NDCG = 0.731228596, loss = 0.255362 [69.29 s]
Iteration 24 [94.7 s]: NDCG = 0.731152264, loss = 0.254687 [60.98 s]
Iteration 25 [95.7 s]: NDCG = 0.730372910, loss = 0.254179 [70.15 s]
Iteration 26 [96.5 s]: NDCG = 0.729412813, loss = 0.254529 [69.83 s]
Iteration 27 [96.3 s]: NDCG = 0.730039380, loss = 0.253650 [68.98 s]
Iteration 28 [96.3 s]: NDCG = 0.729488846, loss = 0.252880 [69.66 s]
Iteration 29 [96.3 s]: NDCG = 0.728222274, loss = 0.252927 [69.46 s]
Iteration 30 [96.8 s]: NDCG = 0.729446333, loss = 0.252788 [69.92 s]
Iteration 31 [95.8 s]: NDCG = 0.728903790, loss = 0.252106 [69.72 s]
Iteration 32 [96.5 s]: NDCG = 0.729600628, loss = 0.251949 [69.79 s]
Iteration 33 [98.5 s]: NDCG = 0.728695759, loss = 0.251817 [70.38 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --reg_layers [0,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, path='Data/movielens/', reg_layers='[0,0.00001,0.0001,0.001]', verbose=1) 
Load data done [33.8 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.690721 [63.1]
Iteration 0 [103.7 s]: NDCG = 0.730304, loss = 0.376059 [405.62 s]
Iteration 1 [120.7 s]: NDCG = 0.736255, loss = 0.352768 [403.50 s]
Iteration 2 [120.3 s]: NDCG = 0.736335, loss = 0.342857 [403.94 s]
Iteration 3 [120.9 s]: NDCG = 0.733596, loss = 0.333065 [402.08 s]
Iteration 4 [120.7 s]: NDCG = 0.735509, loss = 0.324983 [407.65 s]
Iteration 5 [122.7 s]: NDCG = 0.737509, loss = 0.318931 [418.42 s]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --reg_layers [0.000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, path='Data/movielens/', reg_layers='[0.000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [33.8 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Iteration 0 [336.8 s]: NDCG = 0.762925314, loss = 0.378975 [415.94 s]
Iteration 1 [399.1 s]: NDCG = 0.761650883, loss = 0.356850 [419.37 s]
Iteration 2 [398.0 s]: NDCG = 0.757211967, loss = 0.345849 [421.58 s]
Iteration 3 [407.7 s]: NDCG = 0.755794292, loss = 0.337021 [423.84 s]
Iteration 4 [399.8 s]: NDCG = 0.753956509, loss = 0.330539 [425.14 s]
Iteration 5 [398.5 s]: NDCG = 0.753349129, loss = 0.325309 [426.14 s]
Iteration 6 [400.0 s]: NDCG = 0.752972396, loss = 0.321785 [412.10 s]
Iteration 7 [398.0 s]: NDCG = 0.749770632, loss = 0.317965 [408.58 s]
Iteration 8 [406.9 s]: NDCG = 0.751315683, loss = 0.315276 [394.09 s]
Iteration 9 [458.5 s]: NDCG = 0.749476064, loss = 0.312420 [399.78 s]
Iteration 10 [518.9 s]: NDCG = 0.749964866, loss = 0.309764 [428.51 s]
Iteration 11 [516.6 s]: NDCG = 0.750438598, loss = 0.308223 [418.45 s]
Iteration 12 [507.6 s]: NDCG = 0.749265791, loss = 0.306808 [417.79 s]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --reg_layers [0.000000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, path='Data/movielens/', reg_layers='[0.000000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [34.6 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.689228 [68.2]
Iteration 0 [106.4 s]: NDCG = 0.751015, loss = 0.378087 [438.44 s]
Iteration 1 [113.8 s]: NDCG = 0.759828, loss = 0.354925 [435.58 s]
Iteration 2 [113.5 s]: NDCG = 0.758810, loss = 0.344832 [432.23 s]
Iteration 3 [112.7 s]: NDCG = 0.756547, loss = 0.336042 [433.27 s]
Iteration 4 [112.9 s]: NDCG = 0.752347, loss = 0.328398 [431.37 s]
Iteration 5 [115.7 s]: NDCG = 0.750816, loss = 0.322013 [431.01
Iteration 6 [116.2 s]: NDCG = 0.749730, loss = 0.316999 [426.83 s]
Iteration 7 [116.6 s]: NDCG = 0.748600, loss = 0.313423 [428.56 s]
Iteration 8 [115.2 s]: NDCG = 0.748386, loss = 0.309077 [425.11 s]
Iteration 9 [115.2 s]: NDCG = 0.748074, loss = 0.306980 [464.65 s]
Iteration 10 [115.3 s]: NDCG = 0.747454, loss = 0.303805 [462.81 s]
Iteration 11 [115.7 s]: NDCG = 0.746943, loss = 0.301418 [463.29 s]
Iteration 12 [118.4 s]: NDCG = 0.745708, loss = 0.299276 [461.35 s]
Iteration 13 [122.9 s]: NDCG = 0.746263, loss = 0.298007 [437.02 s]
Iteration 14 [124.2 s]: NDCG = 0.744964, loss = 0.295974 [428.95 s]
Iteration 15 [128.3 s]: NDCG = 0.745184, loss = 0.294089 [422.25 s]
Iteration 16 [136.5 s]: NDCG = 0.745792, loss = 0.292792 [415.03 s]
Iteration 17 [150.4 s]: NDCG = 0.744858, loss = 0.291316 [394.76 s]
Iteration 18 [182.0 s]: NDCG = 0.745136, loss = 0.289821 [363.24 s]
Iteration 19 [220.4 s]: NDCG = 0.743798, loss = 0.288132 [352.87 s]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.0001 --reg_layers [0.000000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0001, path='Data/movielens/', reg_layers='[0.000000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [33.8 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.688400 [67.0]
Iteration 0 [93.6 s]: NDCG = 0.730496, loss = 0.417091 [75.51 s]
Iteration 1 [93.3 s]: NDCG = 0.726541, loss = 0.369006 [224.86 s]
Iteration 2 [110.2 s]: NDCG = 0.727497, loss = 0.363391 [344.22 s]
Iteration 3 [110.5 s]: NDCG = 0.729662, loss = 0.360453 [343.98 s]
Iteration 4 [110.4 s]: NDCG = 0.733396, loss = 0.356179 [339.40 s]
Iteration 5 [110.2 s]: NDCG = 0.736558, loss = 0.353952 [338.04 s]
Iteration 6 [110.0 s]: NDCG = 0.739164, loss = 0.351630 [334.49 s]
Iteration 7 [109.8 s]: NDCG = 0.741599, loss = 0.348882 [331.62 s]
Iteration 8 [109.4 s]: NDCG = 0.744464, loss = 0.347964 [329.80 s]
Iteration 9 [109.1 s]: NDCG = 0.746403, loss = 0.346823 [325.51 s]
Iteration 10 [108.7 s]: NDCG = 0.749148, loss = 0.344878 [325.13 s]
Iteration 11 [109.2 s]: NDCG = 0.750480, loss = 0.343957 [321.10 s]
Iteration 12 [108.7 s]: NDCG = 0.751418, loss = 0.340606 [318.74 s]
Iteration 13 [109.0 s]: NDCG = 0.752595, loss = 0.338258 [317.81 s]
Iteration 14 [108.5 s]: NDCG = 0.753140, loss = 0.335785 [315.78 s]
Iteration 15 [108.1 s]: NDCG = 0.754219, loss = 0.333966 [315.51 s]
Iteration 16 [108.4 s]: NDCG = 0.754353, loss = 0.332108 [312.86 s]
Iteration 17 [108.7 s]: NDCG = 0.754138, loss = 0.330409 [311.92 s]
Iteration 18 [108.1 s]: NDCG = 0.754233, loss = 0.328511 [310.14 s]
Iteration 19 [107.9 s]: NDCG = 0.753835, loss = 0.327059 [310.65 s]
Iteration 20 [107.8 s]: NDCG = 0.753751, loss = 0.326404 [309.24 s]
Iteration 21 [108.2 s]: NDCG = 0.753906, loss = 0.325224 [307.46 s]
Iteration 22 [108.9 s]: NDCG = 0.753778, loss = 0.323742 [313.50 s]
Iteration 23 [107.7 s]: NDCG = 0.754011, loss = 0.323327 [304.07 s]
Iteration 24 [107.8 s]: NDCG = 0.753536, loss = 0.321686 [304.64 s]
Iteration 25 [107.5 s]: NDCG = 0.753423, loss = 0.321219 [304.99 s]
Iteration 26 [107.5 s]: NDCG = 0.753671, loss = 0.320319 [305.33 s]
Iteration 27 [107.4 s]: NDCG = 0.753898, loss = 0.319369 [302.80 s]
Iteration 28 [107.7 s]: NDCG = 0.754396, loss = 0.318569 [302.10 s]
Iteration 29 [107.5 s]: NDCG = 0.754079, loss = 0.317756 [300.21 s]
Iteration 30 [107.5 s]: NDCG = 0.753958, loss = 0.316764 [300.54 s]
Iteration 31 [107.4 s]: NDCG = 0.753874, loss = 0.316127 [298.76 s]
Iteration 32 [109.3 s]: NDCG = 0.753655, loss = 0.315208 [295.84 s]
Iteration 33 [107.0 s]: NDCG = 0.753240, loss = 0.314307 [296.56 s]
Iteration 34 [107.0 s]: NDCG = 0.753450, loss = 0.313951 [294.44 s]
Iteration 35 [107.3 s]: NDCG = 0.753432, loss = 0.313303 [297.36 s]
Iteration 36 [106.7 s]: NDCG = 0.753187, loss = 0.312766 [294.18 s]
Iteration 37 [107.2 s]: NDCG = 0.752853, loss = 0.311823 [293.47 s]
Iteration 38 [106.6 s]: NDCG = 0.752956, loss = 0.311762 [294.41 s]
Iteration 39 [106.8 s]: NDCG = 0.752699, loss = 0.310754 [293.24 s]
Iteration 40 [106.6 s]: NDCG = 0.752743, loss = 0.309798 [292.09 s]
Iteration 41 [106.6 s]: NDCG = 0.752645, loss = 0.309782 [291.09 s]
Iteration 42 [107.1 s]: NDCG = 0.752621, loss = 0.309362 [289.02 s]
Iteration 43 [106.3 s]: NDCG = 0.752802, loss = 0.308635 [288.64 s]
Iteration 44 [106.3 s]: NDCG = 0.752216, loss = 0.308693 [288.63 s]
Iteration 45 [106.5 s]: NDCG = 0.752011, loss = 0.307646 [287.23 s]
Iteration 46 [106.5 s]: NDCG = 0.752103, loss = 0.306890 [287.82 s]
Iteration 47 [106.0 s]: NDCG = 0.751891, loss = 0.306397 [284.96 s]
Iteration 48 [106.4 s]: NDCG = 0.751571, loss = 0.306049 [284.50 s]
Iteration 49 [106.1 s]: NDCG = 0.751342, loss = 0.305496 [283.39 s]
Iteration 50 [105.8 s]: NDCG = 0.751522, loss = 0.305021 [281.24 s]
Iteration 51 [105.9 s]: NDCG = 0.751327, loss = 0.304752 [282.39 s]
Iteration 52 [105.6 s]: NDCG = 0.751586, loss = 0.304204 [280.50 s]
Iteration 53 [105.9 s]: NDCG = 0.750932, loss = 0.303753 [280.96 s]
Iteration 54 [105.9 s]: NDCG = 0.751125, loss = 0.303438 [281.67 s]
Iteration 55 [106.0 s]: NDCG = 0.751044, loss = 0.302624 [279.34 s]
Iteration 56 [105.4 s]: NDCG = 0.750715, loss = 0.302303 [279.75 s]
Iteration 57 [105.8 s]: NDCG = 0.750590, loss = 0.303028 [277.39 s]
Iteration 58 [105.6 s]: NDCG = 0.750513, loss = 0.301792 [277.54 s]
Iteration 59 [105.4 s]: NDCG = 0.750687, loss = 0.301002 [277.93 s]
Iteration 60 [105.5 s]: NDCG = 0.750176, loss = 0.301378 [278.03 s]
Iteration 61 [105.7 s]: NDCG = 0.750451, loss = 0.300916 [276.02 s]
Iteration 62 [105.6 s]: NDCG = 0.749986, loss = 0.300565 [274.84 s]
Iteration 63 [105.1 s]: NDCG = 0.750255, loss = 0.300373 [274.04 s]
Iteration 64 [105.1 s]: NDCG = 0.750039, loss = 0.299879 [274.99 s]
Iteration 65 [105.1 s]: NDCG = 0.750020, loss = 0.299434 [273.57 s]
Iteration 66 [105.4 s]: NDCG = 0.750098, loss = 0.299618 [271.09 s]
Iteration 67 [104.9 s]: NDCG = 0.750001, loss = 0.298923 [273.93 s]
Iteration 68 [105.2 s]: NDCG = 0.749411, loss = 0.298781 [273.52 s]
Iteration 69 [105.0 s]: NDCG = 0.749767, loss = 0.298840 [271.49 s]
Iteration 70 [105.0 s]: NDCG = 0.749629, loss = 0.298449 [271.19 s]
Iteration 71 [105.5 s]: NDCG = 0.749790, loss = 0.298148 [271.65 s]
Iteration 72 [104.8 s]: NDCG = 0.749556, loss = 0.298238 [270.32 s]
Iteration 73 [105.1 s]: NDCG = 0.749715, loss = 0.297605 [269.43 s]
Iteration 74 [104.9 s]: NDCG = 0.749741, loss = 0.297313 [267.54 s]
Iteration 75 [105.0 s]: NDCG = 0.749436, loss = 0.297785 [268.28 s]
Iteration 76 [105.1 s]: NDCG = 0.749359, loss = 0.296806 [268.73 s]
Iteration 77 [105.0 s]: NDCG = 0.749143, loss = 0.296792 [267.27 s]
Iteration 78 [104.9 s]: NDCG = 0.748988, loss = 0.296550 [266.62 s]
Iteration 79 [104.8 s]: NDCG = 0.749609, loss = 0.296658 [266.76 s]
Iteration 80 [104.6 s]: NDCG = 0.748952, loss = 0.296225 [264.30 s]
Iteration 81 [104.8 s]: NDCG = 0.749302, loss = 0.296532 [265.80 s]
Iteration 82 [104.7 s]: NDCG = 0.748657, loss = 0.295815 [263.02 s]
Iteration 83 [104.6 s]: NDCG = 0.748812, loss = 0.295573 [262.12 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.0001 --reg_layers [0.000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0001, path='Data/movielens/', reg_layers='[0.000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [35.6 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.688974 [62.2]
Iteration 0 [191.5 s]: NDCG = 0.765814, loss = 0.411977 [95.24 s]
Iteration 1 [393.3 s]: NDCG = 0.766688, loss = 0.369054 [224.57 s]
Iteration 2 [396.2 s]: NDCG = 0.766787, loss = 0.364207 [295.79 s]
Iteration 3 [386.4 s]: NDCG = 0.767031, loss = 0.361159 [286.70 s]
Iteration 4 [390.3 s]: NDCG = 0.767479, loss = 0.358073 [320.30 s]
Iteration 5 [396.9 s]: NDCG = 0.764684, loss = 0.355165 [316.21 s]
Iteration 6 [396.5 s]: NDCG = 0.762789, loss = 0.351845 [316.90 s]
Iteration 7 [396.5 s]: NDCG = 0.763188, loss = 0.349823 [313.43 s]
Iteration 8 [402.0 s]: NDCG = 0.762782, loss = 0.348346 [302.21 s]
Iteration 9 [425.0 s]: NDCG = 0.762294, loss = 0.346194 [272.86 s]
Iteration 10 [494.9 s]: NDCG = 0.761858, loss = 0.344676 [275.80 s]
Iteration 11 [494.6 s]: NDCG = 0.761632, loss = 0.343131 [271.62 s]
Iteration 12 [497.3 s]: NDCG = 0.760605, loss = 0.341514 [263.44 s]
Iteration 13 [497.8 s]: NDCG = 0.760711, loss = 0.340434 [257.24 s]
Iteration 14 [494.7 s]: NDCG = 0.759331, loss = 0.338771 [264.10 s]
Iteration 15 [494.5 s]: NDCG = 0.757993, loss = 0.337407 [259.96 s]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.0001 --reg_layers [0.0000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0001, path='Data/movielens/', reg_layers='[0.0000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [32.2 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.690868 [64.0]
Iteration 0 [92.8 s]: NDCG = 0.765979, loss = 0.416086 [68.57 s]
Iteration 1 [93.4 s]: NDCG = 0.765863, loss = 0.368870 [216.96 s]
Iteration 2 [130.2 s]: NDCG = 0.766441, loss = 0.363489 [371.56 s]
Iteration 3 [130.1 s]: NDCG = 0.766698, loss = 0.360765 [367.87 s]
Iteration 4 [173.6 s]: NDCG = 0.767284, loss = 0.358396 [362.22 s]
Iteration 5 [148.6 s]: NDCG = 0.764070, loss = 0.354617 [357.60 s]
Iteration 6 [363.7 s]: NDCG = 0.762864, loss = 0.352340 [351.64 s]
Iteration 7 [432.3 s]: NDCG = 0.762185, loss = 0.348803 [347.69 s]
Iteration 8 [404.0 s]: NDCG = 0.760910, loss = 0.346578 [341.75 s]
Iteration 9 [470.5 s]: NDCG = 0.760212, loss = 0.344321 [338.73 s]
Iteration 10 [498.1 s]: NDCG = 0.759888, loss = 0.343064 [333.75 s]
Iteration 11 [496.9 s]: NDCG = 0.759110, loss = 0.340467 [328.65 s]
Iteration 12 [498.1 s]: NDCG = 0.758771, loss = 0.338594 [324.87 s]
Iteration 13 [497.8 s]: NDCG = 0.758320, loss = 0.336601 [321.64 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.0001 --reg_layers [0.00000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0001, path='Data/movielens/', reg_layers='[0.00000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [32.4 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.691720 [64.7]
Iteration 0 [94.2 s]: NDCG = 0.752958, loss = 0.424465 [68.83 s]
Iteration 1 [95.4 s]: NDCG = 0.762788, loss = 0.371118 [380.61 s]
Iteration 2 [115.6 s]: NDCG = 0.766318, loss = 0.365283 [453.11 s]
Iteration 3 [117.3 s]: NDCG = 0.766805, loss = 0.362224 [448.79 s]
Iteration 4 [115.6 s]: NDCG = 0.766602, loss = 0.360025 [447.58 s]
Iteration 5 [113.7 s]: NDCG = 0.767331, loss = 0.358614 [442.73 s]
Iteration 6 [114.3 s]: NDCG = 0.766318, loss = 0.355135 [442.87 s]
Iteration 7 [117.9 s]: NDCG = 0.763480, loss = 0.352919 [472.06 s]
Iteration 8 [118.0 s]: NDCG = 0.763108, loss = 0.351069 [464.09 s]
Iteration 9 [117.3 s]: NDCG = 0.762655, loss = 0.349676 [460.18 s]
Iteration 10 [117.4 s]: NDCG = 0.762239, loss = 0.348772 [459.32 s]
Iteration 11 [117.1 s]: NDCG = 0.762114, loss = 0.347679 [458.25 s]
Iteration 12 [117.2 s]: NDCG = 0.762216, loss = 0.347273 [434.79 s]
Iteration 13 [113.9 s]: NDCG = 0.762079, loss = 0.345588 [413.29 s]
Iteration 14 [115.4 s]: NDCG = 0.762160, loss = 0.344499 [425.46 s]
Iteration 15 [124.7 s]: NDCG = 0.762199, loss = 0.344202 [447.64 s]
Iteration 16 [131.1 s]: NDCG = 0.761690, loss = 0.342603 [443.72 s]
Iteration 17 [135.5 s]: NDCG = 0.761425, loss = 0.341230 [437.17 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.001 --reg_layers [0.00000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, path='Data/movielens/', reg_layers='[0.00000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [34.1 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.690526 [68.3]
Iteration 0 [110.0 s]: NDCG = 0.762050, loss = 0.379461 [430.89 s]
Iteration 1 [122.7 s]: NDCG = 0.760713, loss = 0.352516 [359.89 s]
Iteration 2 [138.2 s]: NDCG = 0.760315, loss = 0.339344 [347.43 s]
Iteration 3 [141.2 s]: NDCG = 0.758250, loss = 0.330256 [347.87 s]
Iteration 4 [179.1 s]: NDCG = 0.755519, loss = 0.322784 [348.10 s]
Iteration 5 [161.9 s]: NDCG = 0.753023, loss = 0.317357 [345.46 s]
Iteration 6 [430.0 s]: NDCG = 0.752411, loss = 0.313127 [346.33 s]
Iteration 7 [453.6 s]: NDCG = 0.751700, loss = 0.308228 [344.67 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.001 --reg_layers [0.0000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, path='Data/movielens/', reg_layers='[0.0000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [35.3 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.690904 [69.6]
Iteration 0 [240.0 s]: NDCG = 0.761788, loss = 0.376796 [385.51 s]
Iteration 1 [413.5 s]: NDCG = 0.760918, loss = 0.351164 [394.14 s]
Iteration 2 [404.9 s]: NDCG = 0.758134, loss = 0.339373 [390.97 s]
Iteration 3 [422.1 s]: NDCG = 0.757708, loss = 0.329732 [388.08 s]
Iteration 4 [436.9 s]: NDCG = 0.755765, loss = 0.322744 [400.55 s]
Iteration 5 [432.9 s]: NDCG = 0.754331, loss = 0.316605 [392.28 s]
Iteration 6 [435.9 s]: NDCG = 0.751969, loss = 0.312792 [357.04 s]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.0005 --reg_layers [0.000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0005, path='Data/movielens/', reg_layers='[0.000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [31.7 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.689945 [62.2]
Iteration 0 [318.0 s]: NDCG = 0.765185, loss = 0.383843 [312.96 s]
Iteration 1 [392.2 s]: NDCG = 0.762732, loss = 0.360619 [373.12 s]
Iteration 2 [392.8 s]: NDCG = 0.762080, loss = 0.351298 [373.93 s]
Iteration 3 [393.5 s]: NDCG = 0.758420, loss = 0.343256 [360.74 s]
Iteration 4 [397.2 s]: NDCG = 0.756933, loss = 0.336761 [361.68 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.0005 --reg_layers [0.0000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0005, path='Data/movielens/', reg_layers='[0.0000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [34.0 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.689546 [64.6]
Iteration 0 [117.7 s]: NDCG = 0.764079, loss = 0.383247 [315.49 s]
Iteration 1 [340.7 s]: NDCG = 0.761706, loss = 0.359495 [369.70 s]
Iteration 2 [394.6 s]: NDCG = 0.760213, loss = 0.351503 [371.46 s]
Iteration 3 [392.2 s]: NDCG = 0.758604, loss = 0.344117 [366.78 s]
Iteration 4 [394.0 s]: NDCG = 0.755598, loss = 0.338330 [366.33 s]
Iteration 5 [398.6 s]: NDCG = 0.753976, loss = 0.332890 [363.79 s]
Iteration 6 [393.2 s]: NDCG = 0.751745, loss = 0.328360 [364.68 s]
Iteration 7 [399.8 s]: NDCG = 0.751519, loss = 0.324389 [363.92 s]
Iteration 8 [422.0 s]: NDCG = 0.750653, loss = 0.320260 [378.16 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.0005 --reg_layers [0.00000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0005, path='Data/movielens/', reg_layers='[0.00000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [33.5 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.692508 [64.8]
Iteration 0 [97.4 s]: NDCG = 0.764800, loss = 0.383745 [374.85 s]
Iteration 1 [116.4 s]: NDCG = 0.763960, loss = 0.358268 [401.67 s]
Iteration 2 [115.1 s]: NDCG = 0.764372, loss = 0.349665 [399.45 s]
Iteration 3 [125.7 s]: NDCG = 0.761998, loss = 0.343571 [338.28 s]
Iteration 4 [136.6 s]: NDCG = 0.760556, loss = 0.338096 [320.41 s]
Iteration 5 [137.5 s]: NDCG = 0.756378, loss = 0.332511 [323.15 s]
Iteration 6 [124.7 s]: NDCG = 0.754572, loss = 0.327173 [322.42 s]
Iteration 7 [149.0 s]: NDCG = 0.751841, loss = 0.322872 [320.85 s]
Iteration 8 [258.5 s]: NDCG = 0.748526, loss = 0.318025 [321.79 s]
Iteration 9 [263.6 s]: NDCG = 0.749590, loss = 0.314071 [321.39 s]
Iteration 10 [227.1 s]: NDCG = 0.747460, loss = 0.310226 [320.90 s]
Iteration 11 [340.7 s]: NDCG = 0.746849, loss = 0.306617 [321.17 s]
Iteration 12 [454.7 s]: NDCG = 0.744555, loss = 0.303828 [319.33 s]
Iteration 13 [603.7 s]: NDCG = 0.745256, loss = 0.300538 [319.99 s]
Iteration 14 [572.4 s]: NDCG = 0.743628, loss = 0.297720 [321.39 s]
Iteration 15 [523.1 s]: NDCG = 0.743894, loss = 0.295903 [320.75 s]
Iteration 16 [508.1 s]: NDCG = 0.741573, loss = 0.294129 [319.37 s]
Iteration 17 [505.7 s]: NDCG = 0.741865, loss = 0.292188 [322.19 s]
Iteration 18 [508.8 s]: NDCG = 0.741252, loss = 0.290507 [320.92 s]
Iteration 19 [511.9 s]: NDCG = 0.741299, loss = 0.288512 [320.47 s]
Iteration 20 [506.3 s]: NDCG = 0.741629, loss = 0.287828 [321.36 s]
Iteration 21 [506.9 s]: NDCG = 0.739769, loss = 0.286447 [321.99 s]
Iteration 22 [505.0 s]: NDCG = 0.740245, loss = 0.285129 [321.84 s]
Iteration 23 [506.3 s]: NDCG = 0.739824, loss = 0.284330 [320.09 s]
Iteration 24 [505.4 s]: NDCG = 0.740168, loss = 0.283632 [321.27 s]
Iteration 25 [510.1 s]: NDCG = 0.737926, loss = 0.282835 [325.86 s]
Iteration 26 [504.0 s]: NDCG = 0.738892, loss = 0.281901 [322.83 s]
Iteration 27 [506.4 s]: NDCG = 0.739542, loss = 0.281352 [320.77 s]
Iteration 28 [509.0 s]: NDCG = 0.738861, loss = 0.280230 [321.61 s]
Iteration 29 [505.2 s]: NDCG = 0.737414, loss = 0.280037 [322.13 s]
Iteration 30 [509.1 s]: NDCG = 0.737075, loss = 0.279268 [320.25 s]
Iteration 31 [507.3 s]: NDCG = 0.737337, loss = 0.278954 [321.12 s]
Iteration 32 [505.2 s]: NDCG = 0.736046, loss = 0.277416 [321.35 s]
Iteration 33 [505.4 s]: NDCG = 0.736953, loss = 0.278162 [321.69 s]
Iteration 34 [506.9 s]: NDCG = 0.736965, loss = 0.277419 [320.90 s]
Iteration 35 [506.9 s]: NDCG = 0.736461, loss = 0.276644 [319.79 s]
Iteration 36 [505.4 s]: NDCG = 0.735195, loss = 0.276183 [318.99 s]
Iteration 37 [505.8 s]: NDCG = 0.735845, loss = 0.275727 [320.17 s]
Iteration 38 [506.2 s]: NDCG = 0.735300, loss = 0.274931 [318.94 s]
Iteration 39 [503.3 s]: NDCG = 0.736676, loss = 0.274465 [319.56 s]
Iteration 40 [503.0 s]: NDCG = 0.735405, loss = 0.274277 [317.60 s]
Iteration 41 [504.4 s]: NDCG = 0.736460, loss = 0.274058 [317.91 s]
Iteration 42 [504.1 s]: NDCG = 0.736375, loss = 0.273406 [316.58 s]
Iteration 43 [506.8 s]: NDCG = 0.735951, loss = 0.273230 [317.13 s]
Iteration 44 [504.1 s]: NDCG = 0.735702, loss = 0.273137 [319.55 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.0005 --reg_layers [0.000000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0005, path='Data/movielens/', reg_layers='[0.000000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [33.7 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.687240 [64.0]
Iteration 0 [99.2 s]: NDCG = 0.736102, loss = 0.381519 [346.75 s]
Iteration 1 [121.2 s]: NDCG = 0.748002, loss = 0.357599 [489.71 s]
Iteration 2 [114.9 s]: NDCG = 0.756515, loss = 0.348146 [454.59 s]
Iteration 3 [114.5 s]: NDCG = 0.757649, loss = 0.339625 [454.00 s]
Iteration 4 [114.7 s]: NDCG = 0.756736, loss = 0.332200 [451.77 s]
Iteration 5 [114.5 s]: NDCG = 0.754965, loss = 0.325849 [451.23 s]
Iteration 6 [114.0 s]: NDCG = 0.753064, loss = 0.320759 [456.52 s]
Iteration 7 [114.2 s]: NDCG = 0.752200, loss = 0.316768 [452.08 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.0005 --reg_layers [0.0000000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0005, path='Data/movielens/', reg_layers='[0.0000000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [33.3 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.690110 [67.4]
Iteration 0 [98.1 s]: NDCG = 0.729697, loss = 0.383148 [355.99 s]
Iteration 1 [107.4 s]: NDCG = 0.736561, loss = 0.359684 [417.02 s]
Iteration 2 [107.8 s]: NDCG = 0.740655, loss = 0.349869 [415.47 s]
Iteration 3 [107.5 s]: NDCG = 0.743541, loss = 0.343995 [414.04 s]
Iteration 4 [109.5 s]: NDCG = 0.745676, loss = 0.339213 [410.88 s]
Iteration 5 [111.1 s]: NDCG = 0.745648, loss = 0.334895 [410.14 s]
Iteration 6 [109.8 s]: NDCG = 0.746525, loss = 0.330618 [409.37 s]
Iteration 7 [109.6 s]: NDCG = 0.746692, loss = 0.327489 [408.47 s]
Iteration 8 [109.3 s]: NDCG = 0.748097, loss = 0.323280 [406.67 s]
Iteration 9 [109.9 s]: NDCG = 0.747161, loss = 0.319685 [406.99 s]
Iteration 10 [109.1 s]: NDCG = 0.746319, loss = 0.316130 [405.85 s]
Iteration 11 [108.9 s]: NDCG = 0.746120, loss = 0.312647 [405.60 s]
Iteration 12 [108.8 s]: NDCG = 0.745199, loss = 0.309181 [405.62 s]
Iteration 13 [109.1 s]: NDCG = 0.742888, loss = 0.305717 [407.03 s]
Iteration 14 [110.5 s]: NDCG = 0.741258, loss = 0.303326 [405.56 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.000000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.000000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [33.2 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.686357 [63.3]
Iteration 0 [92.7 s]: NDCG = 0.686858, loss = 0.618126 [65.09 s]
Iteration 1 [88.1 s]: NDCG = 0.696371, loss = 0.455228 [67.50 s]
Iteration 2 [87.9 s]: NDCG = 0.721917, loss = 0.430507 [75.36 s]
Iteration 3 [88.5 s]: NDCG = 0.738828, loss = 0.408997 [78.76 s]
Iteration 4 [89.6 s]: NDCG = 0.742339, loss = 0.396637 [112.59 s]
Iteration 5 [92.0 s]: NDCG = 0.741766, loss = 0.390001 [134.49 s]
Iteration 6 [93.6 s]: NDCG = 0.740189, loss = 0.384962 [175.25 s]
Iteration 7 [97.4 s]: NDCG = 0.739098, loss = 0.380326 [209.34 s]
Iteration 8 [100.2 s]: NDCG = 0.737856, loss = 0.377505 [216.29 s]
Iteration 9 [102.3 s]: NDCG = 0.736824, loss = 0.374698 [217.73 s]
Iteration 10 [102.8 s]: NDCG = 0.735638, loss = 0.373174 [218.54 s]
Iteration 11 [103.4 s]: NDCG = 0.734620, loss = 0.371906 [221.00 s]
Iteration 12 [104.1 s]: NDCG = 0.734430, loss = 0.371002 [220.09 s]
Iteration 13 [103.1 s]: NDCG = 0.733658, loss = 0.369568 [219.72 s]
Iteration 14 [103.1 s]: NDCG = 0.733070, loss = 0.369096 [219.09 s]
Iteration 15 [103.4 s]: NDCG = 0.732556, loss = 0.368434 [219.35 s]
Iteration 16 [103.4 s]: NDCG = 0.732094, loss = 0.367885 [218.91 s]
Iteration 17 [103.1 s]: NDCG = 0.731976, loss = 0.366742 [220.08 s]
Iteration 18 [103.9 s]: NDCG = 0.731910, loss = 0.366027 [219.05 s]
Iteration 19 [103.6 s]: NDCG = 0.731591, loss = 0.366012 [219.49 s]
Iteration 20 [104.2 s]: NDCG = 0.731089, loss = 0.366218 [219.27 s]
Iteration 21 [102.9 s]: NDCG = 0.731254, loss = 0.365166 [219.84 s]
Iteration 22 [103.2 s]: NDCG = 0.731160, loss = 0.365006 [218.29 s]
Iteration 23 [104.1 s]: NDCG = 0.730639, loss = 0.364110 [218.57 s]
Iteration 24 [103.5 s]: NDCG = 0.730829, loss = 0.364005 [217.85 s]
Iteration 25 [102.8 s]: NDCG = 0.730866, loss = 0.362962 [217.10 s]
Iteration 26 [102.6 s]: NDCG = 0.730695, loss = 0.363207 [219.00 s]
Iteration 27 [103.2 s]: NDCG = 0.730673, loss = 0.363345 [217.39 s]
Iteration 28 [102.7 s]: NDCG = 0.730682, loss = 0.362693 [217.58 s]
Iteration 29 [103.0 s]: NDCG = 0.730717, loss = 0.362156 [216.82 s]
Iteration 30 [102.4 s]: NDCG = 0.730364, loss = 0.362021 [216.47 s]
Iteration 31 [103.2 s]: NDCG = 0.730556, loss = 0.361958 [216.86 s]
Iteration 32 [102.9 s]: NDCG = 0.730424, loss = 0.361601 [216.27 s]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.00000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.00000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [33.4 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.688288 [63.7]
Iteration 0 [92.8 s]: NDCG = 0.689059, loss = 0.615019 [64.64 s]
Iteration 1 [87.9 s]: NDCG = 0.697377, loss = 0.455899 [68.33 s]
Iteration 2 [88.7 s]: NDCG = 0.724057, loss = 0.433393 [77.34 s]
Iteration 3 [88.5 s]: NDCG = 0.745481, loss = 0.411356 [80.80 s]
Iteration 4 [89.2 s]: NDCG = 0.751380, loss = 0.398184 [127.11 s]
Iteration 5 [92.5 s]: NDCG = 0.752632, loss = 0.390056 [167.52 s]
Iteration 6 [93.2 s]: NDCG = 0.753647, loss = 0.384850 [191.17 s]
Iteration 7 [96.4 s]: NDCG = 0.753635, loss = 0.380345 [225.20 s]
Iteration 8 [99.6 s]: NDCG = 0.754394, loss = 0.376949 [238.07 s]
Iteration 9 [101.1 s]: NDCG = 0.755183, loss = 0.374898 [241.71 s]
Iteration 10 [101.8 s]: NDCG = 0.755782, loss = 0.373056 [244.38 s]
Iteration 11 [102.5 s]: NDCG = 0.756682, loss = 0.371687 [246.66 s]
Iteration 12 [101.8 s]: NDCG = 0.757643, loss = 0.370087 [248.60 s]
Iteration 13 [101.8 s]: NDCG = 0.758719, loss = 0.368999 [249.33 s]
Iteration 14 [102.6 s]: NDCG = 0.759986, loss = 0.368609 [249.04 s]
Iteration 15 [103.0 s]: NDCG = 0.760767, loss = 0.367430 [249.51 s]
Iteration 16 [101.7 s]: NDCG = 0.761587, loss = 0.366840 [255.61 s]
Iteration 17 [103.7 s]: NDCG = 0.762446, loss = 0.366335 [261.88 s]
Iteration 18 [104.0 s]: NDCG = 0.763031, loss = 0.365719 [262.86 s]
Iteration 19 [103.5 s]: NDCG = 0.763702, loss = 0.365109 [262.47 s]
Iteration 20 [104.3 s]: NDCG = 0.764108, loss = 0.364328 [260.85 s]
Iteration 21 [103.7 s]: NDCG = 0.764464, loss = 0.364502 [261.47 s]
Iteration 22 [103.9 s]: NDCG = 0.765018, loss = 0.364029 [267.12 s]
Iteration 23 [104.0 s]: NDCG = 0.765421, loss = 0.363241 [265.50 s]
Iteration 24 [104.4 s]: NDCG = 0.765780, loss = 0.363132 [266.20 s]
Iteration 25 [104.2 s]: NDCG = 0.766113, loss = 0.363127 [265.28 s]
Iteration 26 [104.5 s]: NDCG = 0.766539, loss = 0.362830 [264.55 s]
Iteration 27 [104.6 s]: NDCG = 0.766793, loss = 0.362686 [265.21 s]
Iteration 28 [105.1 s]: NDCG = 0.766865, loss = 0.362461 [265.13 s]
Iteration 29 [104.7 s]: NDCG = 0.767074, loss = 0.362199 [263.70 s]
Iteration 30 [104.6 s]: NDCG = 0.767521, loss = 0.362162 [265.48 s]
Iteration 31 [104.4 s]: NDCG = 0.767864, loss = 0.361736 [262.62 s]
Iteration 32 [104.3 s]: NDCG = 0.767910, loss = 0.362202 [261.66 s]
Iteration 33 [104.2 s]: NDCG = 0.767947, loss = 0.361491 [259.81 s]
Iteration 34 [104.0 s]: NDCG = 0.767836, loss = 0.361106 [259.98 s]
Iteration 35 [104.2 s]: NDCG = 0.767753, loss = 0.361522 [260.52 s]
Iteration 36 [104.2 s]: NDCG = 0.767793, loss = 0.361172 [260.28 s]
Iteration 37 [104.1 s]: NDCG = 0.767861, loss = 0.360735 [258.80 s]
Iteration 38 [104.0 s]: NDCG = 0.768098, loss = 0.360240 [257.86 s]
Iteration 39 [103.9 s]: NDCG = 0.767955, loss = 0.360751 [259.80 s]
Iteration 40 [104.2 s]: NDCG = 0.768061, loss = 0.360596 [258.36 s]
Iteration 41 [104.1 s]: NDCG = 0.767980, loss = 0.360619 [257.49 s]
Iteration 42 [104.2 s]: NDCG = 0.768139, loss = 0.360525 [257.41 s]
Iteration 43 [104.2 s]: NDCG = 0.768222, loss = 0.359966 [257.50 s]
Iteration 44 [103.9 s]: NDCG = 0.768341, loss = 0.360126 [256.30 s]
Iteration 45 [104.3 s]: NDCG = 0.768416, loss = 0.359814 [257.32 s]
Iteration 46 [103.8 s]: NDCG = 0.768378, loss = 0.359685 [256.70 s]
Iteration 47 [104.2 s]: NDCG = 0.768468, loss = 0.359620 [257.04 s]
Iteration 48 [104.3 s]: NDCG = 0.768259, loss = 0.359295 [255.93 s]
Iteration 49 [104.3 s]: NDCG = 0.768327, loss = 0.359424 [256.46 s]
Iteration 50 [104.2 s]: NDCG = 0.768333, loss = 0.359384 [255.74 s]
Iteration 51 [104.5 s]: NDCG = 0.768486, loss = 0.359568 [256.77 s]
Iteration 52 [104.7 s]: NDCG = 0.768525, loss = 0.359506 [256.54 s]
Iteration 53 [104.4 s]: NDCG = 0.768338, loss = 0.358679 [255.18 s]
Iteration 54 [104.1 s]: NDCG = 0.768416, loss = 0.359074 [256.23 s]
Iteration 55 [103.8 s]: NDCG = 0.768368, loss = 0.358641 [255.82 s]
Iteration 56 [104.2 s]: NDCG = 0.768626, loss = 0.358154 [255.49 s]
Iteration 57 [102.5 s]: NDCG = 0.768638, loss = 0.358315 [237.75 s]
Iteration 58 [102.4 s]: NDCG = 0.768471, loss = 0.358220 [236.57 s]
Iteration 59 [104.5 s]: NDCG = 0.768346, loss = 0.358469 [237.17 s]
Iteration 60 [102.1 s]: NDCG = 0.768556, loss = 0.358540 [237.38 s]
Iteration 61 [101.8 s]: NDCG = 0.768379, loss = 0.358121 [237.67 s]
Iteration 62 [101.7 s]: NDCG = 0.768218, loss = 0.358069 [235.94 s]
Iteration 63 [101.6 s]: NDCG = 0.768216, loss = 0.358002 [240.06 s]
Iteration 64 [103.4 s]: NDCG = 0.768237, loss = 0.358598 [248.62 s]
Iteration 65 [103.1 s]: NDCG = 0.768361, loss = 0.357941 [247.53 s]
Iteration 66 [103.3 s]: NDCG = 0.768462, loss = 0.357820 [247.24 s]
Iteration 67 [103.0 s]: NDCG = 0.768417, loss = 0.357598 [246.68 s]
Iteration 68 [103.6 s]: NDCG = 0.768376, loss = 0.357833 [245.05 s]
Iteration 69 [103.2 s]: NDCG = 0.768304, loss = 0.357569 [245.81 s]
Iteration 70 [102.7 s]: NDCG = 0.768383, loss = 0.357884 [246.01 s]
Iteration 71 [103.0 s]: NDCG = 0.768356, loss = 0.357509 [243.83 s]
Iteration 72 [102.8 s]: NDCG = 0.768367, loss = 0.357172 [244.42 s]
Iteration 73 [103.2 s]: NDCG = 0.768421, loss = 0.357260 [244.21 s]
Iteration 74 [103.3 s]: NDCG = 0.768233, loss = 0.356664 [244.04 s]
Iteration 75 [102.8 s]: NDCG = 0.768235, loss = 0.356873 [243.00 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.0000001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.0000001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [33.2 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.688299 [63.2]
Iteration 0 [91.4 s]: NDCG = 0.699200, loss = 0.600746 [65.06 s]
Iteration 1 [87.9 s]: NDCG = 0.742582, loss = 0.451588 [67.18 s]
Iteration 2 [86.5 s]: NDCG = 0.761428, loss = 0.425709 [68.82 s]
Iteration 3 [87.3 s]: NDCG = 0.763576, loss = 0.405479 [78.24 s]
Iteration 4 [89.2 s]: NDCG = 0.764957, loss = 0.394628 [140.19 s]
Iteration 5 [92.6 s]: NDCG = 0.765695, loss = 0.387207 [194.59 s]
Iteration 6 [96.9 s]: NDCG = 0.766605, loss = 0.382478 [245.91 s]
Iteration 7 [101.4 s]: NDCG = 0.767441, loss = 0.378339 [284.50 s]
Iteration 8 [102.7 s]: NDCG = 0.767605, loss = 0.375757 [297.18 s]
Iteration 9 [105.0 s]: NDCG = 0.768110, loss = 0.373456 [299.30 s]
Iteration 10 [106.2 s]: NDCG = 0.768223, loss = 0.371811 [303.38 s]
Iteration 11 [105.9 s]: NDCG = 0.768371, loss = 0.370791 [306.76 s]
Iteration 12 [107.8 s]: NDCG = 0.768165, loss = 0.369650 [305.61 s]
Iteration 13 [106.9 s]: NDCG = 0.768272, loss = 0.368002 [304.60 s]
Iteration 14 [107.1 s]: NDCG = 0.768314, loss = 0.367974 [303.11 s]
Iteration 15 [107.4 s]: NDCG = 0.768262, loss = 0.367208 [302.69 s]
Iteration 16 [109.0 s]: NDCG = 0.767863, loss = 0.366552 [301.24 s]
Iteration 17 [110.8 s]: NDCG = 0.767871, loss = 0.365627 [300.20 s]
Iteration 18 [115.5 s]: NDCG = 0.768110, loss = 0.365361 [298.77 s]
Iteration 19 [121.0 s]: NDCG = 0.768028, loss = 0.364850 [295.49 s]
Iteration 20 [126.6 s]: NDCG = 0.767954, loss = 0.364638 [291.20 s]
Iteration 21 [136.6 s]: NDCG = 0.767916, loss = 0.364005 [277.48 s]
Iteration 22 [156.0 s]: NDCG = 0.768124, loss = 0.363967 [252.95 s]
Iteration 23 [181.7 s]: NDCG = 0.767916, loss = 0.363410 [221.39 s]
Iteration 24 [220.9 s]: NDCG = 0.767787, loss = 0.363001 [210.98 s]
Iteration 25 [237.4 s]: NDCG = 0.767987, loss = 0.363140 [210.22 s]
Iteration 26 [239.9 s]: NDCG = 0.767813, loss = 0.362531 [209.75 s]
Iteration 27 [239.2 s]: NDCG = 0.768090, loss = 0.362223 [208.97 s]
Iteration 28 [241.0 s]: NDCG = 0.767984, loss = 0.362637 [207.90 s]
Iteration 29 [239.1 s]: NDCG = 0.767835, loss = 0.361906 [208.21 s]
Iteration 30 [241.3 s]: NDCG = 0.767922, loss = 0.362248 [207.91 s]
Iteration 31 [240.8 s]: NDCG = 0.767858, loss = 0.360843 [208.06 s]
Iteration 32 [237.7 s]: NDCG = 0.767732, loss = 0.361336 [206.26 s]
Iteration 33 [232.8 s]: NDCG = 0.767790, loss = 0.361174 [206.49 s]
Iteration 34 [232.0 s]: NDCG = 0.767856, loss = 0.360799 [205.84 s]
Iteration 35 [229.6 s]: NDCG = 0.768035, loss = 0.360041 [205.40 s]
Iteration 36 [227.5 s]: NDCG = 0.768016, loss = 0.360104 [204.60 s]
Iteration 37 [237.6 s]: NDCG = 0.767623, loss = 0.359957 [204.36 s]
Iteration 38 [256.1 s]: NDCG = 0.767826, loss = 0.359689 [203.18 s]
Iteration 39 [284.4 s]: NDCG = 0.768039, loss = 0.358950 [204.12 s]
Iteration 40 [299.9 s]: NDCG = 0.767768, loss = 0.359611 [203.05 s]
Iteration 41 [303.3 s]: NDCG = 0.767725, loss = 0.359125 [202.24 s]
Iteration 42 [301.9 s]: NDCG = 0.767917, loss = 0.358894 [202.22 s]
Iteration 43 [301.5 s]: NDCG = 0.767925, loss = 0.358728 [201.07 s]
Iteration 44 [310.2 s]: NDCG = 0.767742, loss = 0.359112 [202.28 s]
Iteration 45 [295.7 s]: NDCG = 0.767846, loss = 0.358733 [200.20 s]
Iteration 46 [280.8 s]: NDCG = 0.767738, loss = 0.358637 [200.62 s]
Iteration 47 [258.5 s]: NDCG = 0.767813, loss = 0.358134 [201.08 s]
Iteration 48 [235.0 s]: NDCG = 0.767781, loss = 0.358223 [200.42 s]
Iteration 49 [229.2 s]: NDCG = 0.767602, loss = 0.357618 [199.59 s]
Iteration 50 [228.1 s]: NDCG = 0.767653, loss = 0.358127 [199.29 s]
Iteration 51 [220.6 s]: NDCG = 0.767831, loss = 0.357629 [198.01 s]
Iteration 52 [223.4 s]: NDCG = 0.767660, loss = 0.357603 [198.44 s]
Iteration 53 [231.0 s]: NDCG = 0.767612, loss = 0.357927 [197.32 s]
Iteration 54 [257.3 s]: NDCG = 0.767457, loss = 0.357316 [197.96 s]
Iteration 55 [309.8 s]: NDCG = 0.767632, loss = 0.357200 [196.70 s]
Iteration 56 [377.6 s]: NDCG = 0.767679, loss = 0.356724 [197.00 s]
Iteration 57 [407.5 s]: NDCG = 0.767734, loss = 0.356651 [197.81 s]
Iteration 58 [410.4 s]: NDCG = 0.767605, loss = 0.356776 [196.00 s]
Iteration 59 [409.2 s]: NDCG = 0.767536, loss = 0.356610 [194.70 s]
Iteration 60 [411.8 s]: NDCG = 0.767550, loss = 0.356448 [194.51 s]
Iteration 61 [412.1 s]: NDCG = 0.767597, loss = 0.356469 [193.95 s]
Iteration 62 [417.6 s]: NDCG = 0.767561, loss = 0.356154 [194.26 s]
Iteration 63 [422.0 s]: NDCG = 0.767601, loss = 0.355461 [195.38 s]
Iteration 64 [432.5 s]: NDCG = 0.767701, loss = 0.355644 [194.56 s]
Iteration 65 [449.0 s]: NDCG = 0.767916, loss = 0.355542 [193.45 s]
Iteration 66 [485.8 s]: NDCG = 0.767742, loss = 0.355400 [193.61 s]
Iteration 67 [547.3 s]: NDCG = 0.767733, loss = 0.355051 [193.56 s]
Iteration 68 [594.5 s]: NDCG = 0.767859, loss = 0.354598 [193.08 s]
Iteration 69 [601.5 s]: NDCG = 0.767687, loss = 0.354055 [193.07 s]
Iteration 70 [590.6 s]: NDCG = 0.767657, loss = 0.353608 [191.84 s]
Iteration 71 [567.8 s]: NDCG = 0.767448, loss = 0.354123 [191.95 s]
Iteration 72 [535.2 s]: NDCG = 0.767559, loss = 0.353897 [190.53 s]
Iteration 73 [506.4 s]: NDCG = 0.767687, loss = 0.353122 [192.67 s]
Iteration 74 [496.2 s]: NDCG = 0.767676, loss = 0.353438 [190.86 s]
Iteration 75 [500.8 s]: NDCG = 0.767547, loss = 0.352418 [190.67 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.00001,0.00001,0.0001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.00001,0.00001,0.0001,0.001]', verbose=1) 
Load data done [31.4 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.691449 [71.7]
Iteration 0 [132.2 s]: NDCG = 0.728272, loss = 0.601392 [73.09 s]
Iteration 1 [290.2 s]: NDCG = 0.756974, loss = 0.454258 [88.81 s]
Iteration 2 [373.0 s]: NDCG = 0.760434, loss = 0.431972 [126.69 s]
Iteration 3 [375.7 s]: NDCG = 0.761975, loss = 0.410432 [136.97 s]
Iteration 4 [383.8 s]: NDCG = 0.763458, loss = 0.397194 [189.91 s]
Iteration 5 [380.2 s]: NDCG = 0.764845, loss = 0.389417 [203.45 s]
Iteration 6 [382.3 s]: NDCG = 0.766057, loss = 0.383836 [198.50 s]
Iteration 7 [387.1 s]: NDCG = 0.767012, loss = 0.379284 [216.52 s]
Iteration 8 [399.3 s]: NDCG = 0.767898, loss = 0.377165 [226.57 s]
Iteration 9 [399.2 s]: NDCG = 0.768108, loss = 0.374860 [234.28 s]
Iteration 10 [428.4 s]: NDCG = 0.768365, loss = 0.373578 [240.50 s]
Iteration 11 [488.5 s]: NDCG = 0.768204, loss = 0.372710 [237.96 s]
Iteration 12 [505.6 s]: NDCG = 0.768424, loss = 0.372127 [238.44 s]
Iteration 13 [507.0 s]: NDCG = 0.768367, loss = 0.371073 [242.39 s]
Iteration 14 [505.1 s]: NDCG = 0.768513, loss = 0.370608 [250.34 s]
Iteration 15 [506.7 s]: NDCG = 0.768275, loss = 0.369977 [242.87 s]
Iteration 16 [523.0 s]: NDCG = 0.768204, loss = 0.369293 [246.69 s]
Iteration 17 [516.3 s]: NDCG = 0.768150, loss = 0.369132 [235.88 s]
Iteration 18 [506.8 s]: NDCG = 0.768062, loss = 0.368821 [237.31 s]
Iteration 19 [522.0 s]: NDCG = 0.768073, loss = 0.367942 [244.00 s]
Iteration 20 [519.3 s]: NDCG = 0.768189, loss = 0.368136 [244.31 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.00001,0.0001,0.001,0.01]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.00001,0.0001,0.001,0.01]', verbose=1) 
Load data done [32.0 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.691107 [61.5]
Iteration 0 [122.1 s]: NDCG = 0.726487, loss = 0.815485 [67.26 s]
Iteration 1 [287.7 s]: NDCG = 0.753769, loss = 0.608018 [130.64 s]
Iteration 2 [372.9 s]: NDCG = 0.760173, loss = 0.540207 [208.04 s]
Iteration 3 [381.4 s]: NDCG = 0.761978, loss = 0.490574 [340.02 s]
Iteration 4 [382.5 s]: NDCG = 0.763416, loss = 0.454996 [385.17 s]
Iteration 5 [389.8 s]: NDCG = 0.764403, loss = 0.432558 [388.71 s]
Iteration 6 [389.9 s]: NDCG = 0.765086, loss = 0.417977 [369.49 s]
Iteration 7 [390.1 s]: NDCG = 0.765690, loss = 0.408762 [367.07 s]
Iteration 8 [393.9 s]: NDCG = 0.766203, loss = 0.403041 [373.32 s]
Iteration 9 [401.2 s]: NDCG = 0.766772, loss = 0.399221 [375.28 s]
Iteration 10 [428.0 s]: NDCG = 0.767162, loss = 0.396117 [376.01 s]
Iteration 11 [493.5 s]: NDCG = 0.767234, loss = 0.394194 [390.31 s]
Iteration 12 [510.9 s]: NDCG = 0.767526, loss = 0.392475 [390.50 s]
Iteration 13 [511.5 s]: NDCG = 0.768051, loss = 0.391189 [390.64 s]
Iteration 14 [508.9 s]: NDCG = 0.768119, loss = 0.389752 [376.09 s]
Iteration 15 [504.9 s]: NDCG = 0.768352, loss = 0.389226 [376.55 s]
Iteration 16 [506.0 s]: NDCG = 0.768443, loss = 0.387969 [376.53 s]
Iteration 17 [509.1 s]: NDCG = 0.768341, loss = 0.387685 [378.39 s]
Iteration 18 [506.6 s]: NDCG = 0.768362, loss = 0.386888 [376.98 s]
Iteration 19 [506.4 s]: NDCG = 0.768235, loss = 0.386633 [377.06 s]
Iteration 20 [505.4 s]: NDCG = 0.768387, loss = 0.385289 [377.06 s]
Iteration 21 [505.8 s]: NDCG = 0.768175, loss = 0.385132 [376.43 s]
Iteration 22 [505.7 s]: NDCG = 0.768469, loss = 0.384965 [376.82 s]
Iteration 23 [506.1 s]: NDCG = 0.768333, loss = 0.384500 [376.80 s]
Iteration 24 [507.4 s]: NDCG = 0.768434, loss = 0.383804 [376.74 s]
Iteration 25 [507.7 s]: NDCG = 0.768518, loss = 0.383717 [377.02 s]
Iteration 26 [506.5 s]: NDCG = 0.768489, loss = 0.383270 [376.77 s]
Iteration 27 [506.0 s]: NDCG = 0.768596, loss = 0.382712 [376.61 s]
Iteration 28 [506.4 s]: NDCG = 0.768427, loss = 0.383182 [376.58 s]
Iteration 29 [507.1 s]: NDCG = 0.768509, loss = 0.382131 [376.70 s]
Iteration 30 [507.2 s]: NDCG = 0.768422, loss = 0.382124 [376.42 s]
Iteration 31 [507.1 s]: NDCG = 0.768484, loss = 0.381991 [376.54 s]
Iteration 32 [505.8 s]: NDCG = 0.768524, loss = 0.382103 [376.66 s]
Iteration 33 [509.0 s]: NDCG = 0.768465, loss = 0.381518 [377.22 s]
Iteration 34 [506.6 s]: NDCG = 0.768636, loss = 0.381176 [377.59 s]
Iteration 35 [505.1 s]: NDCG = 0.768616, loss = 0.381013 [377.51 s]
Iteration 36 [509.6 s]: NDCG = 0.768631, loss = 0.380935 [380.90 s]
Iteration 37 [513.7 s]: NDCG = 0.768639, loss = 0.380918 [377.71 s]
Iteration 38 [507.6 s]: NDCG = 0.768449, loss = 0.380274 [377.86 s]
Iteration 39 [506.9 s]: NDCG = 0.768658, loss = 0.380504 [377.36 s]
Iteration 40 [507.4 s]: NDCG = 0.768493, loss = 0.380484 [377.85 s]
Iteration 41 [505.8 s]: NDCG = 0.768505, loss = 0.380491 [377.02 s]
Iteration 42 [507.1 s]: NDCG = 0.768750, loss = 0.379670 [377.15 s]
Iteration 43 [505.4 s]: NDCG = 0.768643, loss = 0.380089 [377.23 s]
Iteration 44 [508.9 s]: NDCG = 0.768560, loss = 0.379687 [377.15 s]
Iteration 45 [506.2 s]: NDCG = 0.768329, loss = 0.379832 [376.82 s]
Iteration 46 [505.4 s]: NDCG = 0.768444, loss = 0.379038 [376.82 s]
Iteration 47 [507.9 s]: NDCG = 0.768510, loss = 0.379074 [376.72 s]
Iteration 48 [508.1 s]: NDCG = 0.768512, loss = 0.379309 [376.62 s]
Iteration 49 [507.1 s]: NDCG = 0.768381, loss = 0.378630 [376.49 s]
Iteration 50 [507.3 s]: NDCG = 0.768460, loss = 0.379321 [376.50 s]
Iteration 51 [505.4 s]: NDCG = 0.768366, loss = 0.378910 [376.71 s]
Iteration 52 [510.3 s]: NDCG = 0.768364, loss = 0.378779 [376.66 s]
Iteration 53 [504.9 s]: NDCG = 0.768480, loss = 0.378399 [382.13 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.00001,0.001,0.01,0.1]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.00001,0.001,0.01,0.1]', verbose=1) 
Load data done [33.5 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.688132 [62.9]
Iteration 0 [121.1 s]: NDCG = 0.720680, loss = 2.843672 [69.67 s]
Iteration 1 [284.0 s]: NDCG = 0.744613, loss = 2.058733 [143.97 s]
Iteration 2 [369.6 s]: NDCG = 0.755485, loss = 1.506588 [294.31 s]
Iteration 3 [375.5 s]: NDCG = 0.761289, loss = 1.112238 [370.81 s]
Iteration 4 [381.3 s]: NDCG = 0.765345, loss = 0.836685 [394.27 s]
Iteration 5 [386.3 s]: NDCG = 0.768568, loss = 0.654664 [402.55 s]
Iteration 6 [393.2 s]: NDCG = 0.768264, loss = 0.541824 [425.05 s]
Iteration 7 [399.8 s]: NDCG = 0.765888, loss = 0.478203 [429.81 s]
Iteration 8 [399.2 s]: NDCG = 0.756276, loss = 0.446932 [419.82 s]
Iteration 9 [406.2 s]: NDCG = 0.790276, loss = 0.435097 [342.45 s]
Iteration 10 [450.1 s]: NDCG = 0.790276, loss = 0.432708 [126.64 s]
Iteration 11 [611.4 s]: NDCG = 0.790276, loss = 0.432375 [184.76 s]
Iteration 12 [1046.9 s]: NDCG = 0.790276, loss = 0.432577 [106.56 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.00001,0.0002,0.001,0.005]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.00001,0.0002,0.001,0.005]', verbose=1) 
Load data done [33.1 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.685314 [62.3]
Iteration 0 [122.3 s]: NDCG = 0.726516, loss = 0.736580 [72.04 s]
Iteration 1 [287.0 s]: NDCG = 0.753834, loss = 0.551573 [134.00 s]
Iteration 2 [371.4 s]: NDCG = 0.760108, loss = 0.502608 [238.36 s]
Iteration 3 [377.9 s]: NDCG = 0.762285, loss = 0.466095 [336.79 s]
Iteration 4 [385.4 s]: NDCG = 0.763600, loss = 0.439692 [411.93 s]
Iteration 5 [407.2 s]: NDCG = 0.764445, loss = 0.424237 [443.38 s]
Iteration 6 [412.3 s]: NDCG = 0.765044, loss = 0.412833 [383.03 s]
Iteration 7 [399.1 s]: NDCG = 0.765656, loss = 0.406614 [378.78 s]
Iteration 8 [402.5 s]: NDCG = 0.766010, loss = 0.401920 [383.06 s]
Iteration 9 [408.2 s]: NDCG = 0.766524, loss = 0.398113 [384.38 s]
Iteration 10 [450.4 s]: NDCG = 0.766994, loss = 0.396136 [421.89 s]
Iteration 11 [506.4 s]: NDCG = 0.767162, loss = 0.394201 [426.49 s]
Iteration 12 [526.8 s]: NDCG = 0.767390, loss = 0.392127 [427.64 s]
Iteration 13 [520.8 s]: NDCG = 0.767771, loss = 0.391251 [386.60 s]
Iteration 14 [524.6 s]: NDCG = 0.767761, loss = 0.390962 [426.04 s]
Iteration 15 [527.7 s]: NDCG = 0.767989, loss = 0.389469 [428.19 s]
Iteration 16 [540.6 s]: NDCG = 0.768311, loss = 0.388779 [427.54 s]
Iteration 17 [536.2 s]: NDCG = 0.768114, loss = 0.387621 [426.97 s]
Iteration 18 [541.0 s]: NDCG = 0.768340, loss = 0.387316 [427.01 s]
Iteration 19 [527.0 s]: NDCG = 0.768406, loss = 0.386121 [416.66 s]
Iteration 20 [536.7 s]: NDCG = 0.768483, loss = 0.386119 [424.45 s]
Iteration 21 [535.0 s]: NDCG = 0.768418, loss = 0.385444 [419.15 s]
Iteration 22 [531.9 s]: NDCG = 0.768481, loss = 0.385123 [421.46 s]
Iteration 23 [525.8 s]: NDCG = 0.768614, loss = 0.383982 [417.96 s]
Iteration 24 [525.2 s]: NDCG = 0.768424, loss = 0.383971 [418.13 s]
Iteration 25 [523.0 s]: NDCG = 0.768655, loss = 0.383828 [426.78 s]
Iteration 26 [532.8 s]: NDCG = 0.768728, loss = 0.383333 [427.56 s]
Iteration 27 [523.8 s]: NDCG = 0.768730, loss = 0.383388 [384.87 s]
Iteration 28 [523.5 s]: NDCG = 0.768728, loss = 0.382826 [386.45 s]
Iteration 29 [524.4 s]: NDCG = 0.768800, loss = 0.383205 [425.48 s]
Iteration 30 [538.6 s]: NDCG = 0.768892, loss = 0.382561 [426.27 s]
Iteration 31 [537.1 s]: NDCG = 0.768508, loss = 0.382106 [425.64 s]
Iteration 32 [523.0 s]: NDCG = 0.768554, loss = 0.382048 [386.22 s]
Iteration 33 [527.4 s]: NDCG = 0.768586, loss = 0.381604 [407.90 s]
Iteration 34 [522.8 s]: NDCG = 0.768459, loss = 0.381278 [402.85 s]
Iteration 35 [522.6 s]: NDCG = 0.768245, loss = 0.381249 [409.77 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.000001,0.0002,0.001,0.005]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.000001,0.0002,0.001,0.005]', verbose=1) 
Load data done [33.6 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.689970 [66.0]
Iteration 0 [96.5 s]: NDCG = 0.715562, loss = 0.699549 [67.92 s]
Iteration 1 [91.8 s]: NDCG = 0.756867, loss = 0.541232 [74.02 s]
Iteration 2 [108.0 s]: NDCG = 0.760319, loss = 0.497489 [134.08 s]
Iteration 3 [126.1 s]: NDCG = 0.761384, loss = 0.462176 [295.27 s]
Iteration 4 [166.4 s]: NDCG = 0.762507, loss = 0.436243 [299.41 s]
Iteration 5 [140.6 s]: NDCG = 0.764025, loss = 0.419761 [333.34 s]
Iteration 6 [278.1 s]: NDCG = 0.765404, loss = 0.408971 [323.19 s]
Iteration 7 [414.6 s]: NDCG = 0.766101, loss = 0.401591 [349.44 s]
Iteration 8 [398.8 s]: NDCG = 0.766645, loss = 0.396441 [331.51 s]
Iteration 9 [414.9 s]: NDCG = 0.767011, loss = 0.393100 [331.80 s]
Iteration 10 [469.8 s]: NDCG = 0.767420, loss = 0.389761 [331.49 s]
Iteration 11 [504.0 s]: NDCG = 0.767915, loss = 0.388264 [332.21 s]
Iteration 12 [504.0 s]: NDCG = 0.768018, loss = 0.386906 [333.26 s]
Iteration 13 [505.5 s]: NDCG = 0.768146, loss = 0.385354 [332.98 s]
Iteration 14 [505.7 s]: NDCG = 0.768412, loss = 0.384289 [331.47 s]
Iteration 15 [510.7 s]: NDCG = 0.768403, loss = 0.383704 [344.88 s]
Iteration 16 [510.4 s]: NDCG = 0.768267, loss = 0.382599 [332.61 s]
Iteration 17 [505.1 s]: NDCG = 0.768422, loss = 0.381723 [332.62 s]
Iteration 18 [504.7 s]: NDCG = 0.768367, loss = 0.380631 [332.58 s]
Iteration 19 [504.8 s]: NDCG = 0.768480, loss = 0.380387 [332.14 s]
Iteration 20 [506.9 s]: NDCG = 0.768454, loss = 0.379631 [332.57 s]
Iteration 21 [505.8 s]: NDCG = 0.768481, loss = 0.379536 [332.58 s]
Iteration 22 [505.1 s]: NDCG = 0.768453, loss = 0.378690 [332.21 s]
Iteration 23 [506.5 s]: NDCG = 0.768481, loss = 0.377641 [332.22 s]
Iteration 24 [505.6 s]: NDCG = 0.768602, loss = 0.377813 [332.06 s]
Iteration 25 [505.6 s]: NDCG = 0.768624, loss = 0.377534 [332.32 s]
Iteration 26 [505.8 s]: NDCG = 0.768798, loss = 0.376982 [332.09 s]
Iteration 27 [505.7 s]: NDCG = 0.768935, loss = 0.375755 [331.42 s]
Iteration 28 [504.7 s]: NDCG = 0.768904, loss = 0.376427 [331.42 s]
Iteration 29 [506.1 s]: NDCG = 0.768828, loss = 0.375280 [331.31 s]
Iteration 30 [505.4 s]: NDCG = 0.768769, loss = 0.375460 [331.15 s]
Iteration 31 [508.3 s]: NDCG = 0.768854, loss = 0.375063 [331.14 s]
Iteration 32 [504.8 s]: NDCG = 0.768684, loss = 0.374942 [331.34 s]
Iteration 33 [512.9 s]: NDCG = 0.768645, loss = 0.374288 [332.86 s]
Iteration 34 [506.6 s]: NDCG = 0.768695, loss = 0.374288 [330.99 s]
Iteration 35 [506.9 s]: NDCG = 0.768761, loss = 0.374323 [331.08 s]
Iteration 36 [508.3 s]: NDCG = 0.768747, loss = 0.373169 [331.26 s]
Iteration 37 [506.5 s]: NDCG = 0.768600, loss = 0.373381 [331.14 s]
Iteration 38 [505.6 s]: NDCG = 0.768709, loss = 0.373314 [330.93 s]
Iteration 39 [505.3 s]: NDCG = 0.768609, loss = 0.372924 [331.05 s]
Iteration 40 [506.5 s]: NDCG = 0.768567, loss = 0.372465 [331.44 s]
Iteration 41 [505.9 s]: NDCG = 0.768678, loss = 0.372674 [331.80 s]
Iteration 42 [504.6 s]: NDCG = 0.768577, loss = 0.373019 [331.34 s]
Iteration 43 [504.1 s]: NDCG = 0.768646, loss = 0.372189 [331.05 s]
Iteration 44 [504.5 s]: NDCG = 0.768490, loss = 0.372040 [330.80 s]
Iteration 45 [504.3 s]: NDCG = 0.768564, loss = 0.371775 [331.13 s]
Iteration 46 [506.4 s]: NDCG = 0.768656, loss = 0.371713 [331.09 s]
Iteration 47 [506.9 s]: NDCG = 0.768522, loss = 0.371802 [331.11 s]
Iteration 48 [506.0 s]: NDCG = 0.768641, loss = 0.371630 [330.79 s]
Iteration 49 [507.6 s]: NDCG = 0.768547, loss = 0.371349 [330.63 s]
Iteration 50 [507.5 s]: NDCG = 0.768384, loss = 0.371257 [331.15 s]
Iteration 51 [504.3 s]: NDCG = 0.768683, loss = 0.371324 [331.76 s]
Iteration 52 [506.6 s]: NDCG = 0.768556, loss = 0.370366 [331.07 s]
Iteration 53 [505.0 s]: NDCG = 0.768635, loss = 0.370529 [330.89 s]
Iteration 54 [504.8 s]: NDCG = 0.768601, loss = 0.370384 [330.62 s]
Iteration 55 [504.5 s]: NDCG = 0.768526, loss = 0.370178 [331.21 s]
Iteration 56 [504.7 s]: NDCG = 0.768455, loss = 0.369575 [330.92 s]
Iteration 57 [506.3 s]: NDCG = 0.768477, loss = 0.370091 [331.29 s]
Iteration 58 [509.9 s]: NDCG = 0.768509, loss = 0.369833 [333.28 s]
Iteration 59 [510.7 s]: NDCG = 0.768605, loss = 0.369715 [330.91 s]
Iteration 60 [505.4 s]: NDCG = 0.768540, loss = 0.369409 [331.18 s]
Iteration 61 [506.1 s]: NDCG = 0.768675, loss = 0.369803 [330.88 s]
Iteration 62 [510.6 s]: NDCG = 0.768492, loss = 0.369691 [330.37 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.0000001,0.0002,0.001,0.005]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.0000001,0.0002,0.001,0.005]', verbose=1) 
Load data done [31.8 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.690565 [72.0]
Iteration 0 [105.2 s]: NDCG = 0.695124, loss = 0.750770 [73.27 s]
Iteration 1 [92.4 s]: NDCG = 0.730327, loss = 0.557722 [85.91 s]
Iteration 2 [93.5 s]: NDCG = 0.757829, loss = 0.505545 [203.98 s]
Iteration 3 [98.7 s]: NDCG = 0.762075, loss = 0.468028 [376.49 s]
Iteration 4 [107.1 s]: NDCG = 0.763208, loss = 0.440944 [431.32 s]
Iteration 5 [110.0 s]: NDCG = 0.764707, loss = 0.424723 [463.30 s]
Iteration 6 [117.5 s]: NDCG = 0.765197, loss = 0.412949 [474.30 s]
Iteration 7 [123.7 s]: NDCG = 0.765842, loss = 0.405350 [473.72 s]
Iteration 8 [124.8 s]: NDCG = 0.766292, loss = 0.399157 [484.01 s]
Iteration 9 [126.5 s]: NDCG = 0.766737, loss = 0.395357 [474.89 s]
Iteration 10 [119.8 s]: NDCG = 0.767141, loss = 0.392694 [467.98 s]
Iteration 11 [120.8 s]: NDCG = 0.767276, loss = 0.391067 [463.22 s]
Iteration 12 [120.3 s]: NDCG = 0.767517, loss = 0.388632 [464.36 s]
Iteration 13 [120.0 s]: NDCG = 0.767756, loss = 0.386308 [476.83 s]
Iteration 14 [128.7 s]: NDCG = 0.768023, loss = 0.385414 [463.87 s]
Iteration 15 [120.5 s]: NDCG = 0.768273, loss = 0.384301 [455.70 s]
Iteration 16 [123.8 s]: NDCG = 0.768368, loss = 0.383052 [458.07 s]
Iteration 17 [124.5 s]: NDCG = 0.768181, loss = 0.382171 [450.12 s]
Iteration 18 [129.5 s]: NDCG = 0.768123, loss = 0.381252 [431.14 s]
Iteration 19 [134.4 s]: NDCG = 0.768416, loss = 0.380318 [402.86 s]
Iteration 20 [139.5 s]: NDCG = 0.768534, loss = 0.379758 [379.93 s]
Iteration 21 [149.3 s]: NDCG = 0.768513, loss = 0.379537 [374.19 s]
Iteration 22 [167.2 s]: NDCG = 0.768270, loss = 0.378365 [373.14 s]
Iteration 23 [195.6 s]: NDCG = 0.768596, loss = 0.378600 [375.65 s]
Iteration 24 [231.9 s]: NDCG = 0.768460, loss = 0.377369 [405.55 s]
Iteration 25 [260.9 s]: NDCG = 0.768363, loss = 0.376816 [409.41 s]
Iteration 26 [262.5 s]: NDCG = 0.768283, loss = 0.376826 [383.87 s]
Iteration 27 [251.0 s]: NDCG = 0.768371, loss = 0.376321 [369.57 s]
Iteration 28 [251.5 s]: NDCG = 0.768489, loss = 0.375998 [368.74 s]
Iteration 29 [251.5 s]: NDCG = 0.768625, loss = 0.374928 [370.65 s]
Iteration 30 [251.0 s]: NDCG = 0.768521, loss = 0.374975 [369.09 s]
Iteration 31 [251.1 s]: NDCG = 0.768605, loss = 0.374965 [368.93 s]
Iteration 32 [249.2 s]: NDCG = 0.768597, loss = 0.374250 [372.53 s]
Iteration 33 [244.0 s]: NDCG = 0.768535, loss = 0.374679 [389.85 s]
Iteration 34 [247.5 s]: NDCG = 0.768569, loss = 0.374047 [380.99 s]
Iteration 35 [241.0 s]: NDCG = 0.768656, loss = 0.373583 [372.01 s]
Iteration 36 [241.6 s]: NDCG = 0.768622, loss = 0.373405 [369.92 s]
Iteration 37 [248.8 s]: NDCG = 0.768594, loss = 0.373369 [370.71 s]
Iteration 38 [268.2 s]: NDCG = 0.768588, loss = 0.372908 [371.59 s]
Iteration 39 [296.0 s]: NDCG = 0.768527, loss = 0.372455 [398.80 s]
Iteration 40 [327.0 s]: NDCG = 0.768551, loss = 0.372596 [409.06 s]
Iteration 41 [327.7 s]: NDCG = 0.768624, loss = 0.372164 [410.57 s]
Iteration 42 [327.7 s]: NDCG = 0.768338, loss = 0.371734 [398.83 s]
Iteration 43 [321.6 s]: NDCG = 0.768366, loss = 0.371647 [402.99 s]
Iteration 44 [329.2 s]: NDCG = 0.768276, loss = 0.371641 [381.21 s]
Iteration 45 [307.3 s]: NDCG = 0.768330, loss = 0.371454 [369.87 s]
Iteration 46 [291.7 s]: NDCG = 0.768390, loss = 0.371240 [376.00 s]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.000005,0.0002,0.001,0.005]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.000005,0.0002,0.001,0.005]', verbose=1) 
Load data done [32.6 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.688931 [64.4]
Iteration 0 [102.4 s]: NDCG = 0.722578, loss = 0.729407 [66.22 s]
Iteration 1 [201.6 s]: NDCG = 0.757127, loss = 0.550859 [94.13 s]
Iteration 2 [354.0 s]: NDCG = 0.759742, loss = 0.505074 [194.71 s]
Iteration 3 [373.6 s]: NDCG = 0.760408, loss = 0.469523 [322.64 s]
Iteration 4 [379.6 s]: NDCG = 0.762287, loss = 0.440965 [418.16 s]
Iteration 5 [393.2 s]: NDCG = 0.763208, loss = 0.422295 [429.12 s]
Iteration 6 [400.1 s]: NDCG = 0.764215, loss = 0.411198 [394.85 s]
Iteration 7 [392.3 s]: NDCG = 0.765081, loss = 0.404070 [376.37 s]
Iteration 8 [394.9 s]: NDCG = 0.765620, loss = 0.398601 [378.90 s]
Iteration 9 [406.0 s]: NDCG = 0.765764, loss = 0.395614 [379.63 s]
Iteration 10 [441.1 s]: NDCG = 0.766132, loss = 0.393139 [388.08 s]
Iteration 11 [501.6 s]: NDCG = 0.766842, loss = 0.391674 [384.40 s]
Iteration 12 [514.0 s]: NDCG = 0.767219, loss = 0.389937 [393.37 s]
Iteration 13 [519.5 s]: NDCG = 0.767612, loss = 0.389322 [385.73 s]
Iteration 14 [507.3 s]: NDCG = 0.767519, loss = 0.387519 [380.42 s]
Iteration 15 [504.8 s]: NDCG = 0.767978, loss = 0.387218 [380.37 s]
Iteration 16 [506.2 s]: NDCG = 0.767906, loss = 0.385835 [380.35 s]
Iteration 17 [506.2 s]: NDCG = 0.767964, loss = 0.386280 [380.59 s]
Iteration 18 [505.8 s]: NDCG = 0.768061, loss = 0.384726 [380.37 s]
Iteration 19 [510.4 s]: NDCG = 0.768252, loss = 0.384401 [381.49 s]
Iteration 20 [507.5 s]: NDCG = 0.768109, loss = 0.383789 [381.19 s]
Iteration 21 [506.8 s]: NDCG = 0.768090, loss = 0.383251 [380.34 s]
Iteration 22 [511.2 s]: NDCG = 0.768493, loss = 0.382903 [388.26 s]
Iteration 23 [506.2 s]: NDCG = 0.768176, loss = 0.382519 [383.38 s]
Iteration 24 [505.7 s]: NDCG = 0.768142, loss = 0.381725 [381.14 s]
Iteration 25 [509.5 s]: NDCG = 0.768344, loss = 0.381284 [382.02 s]
Iteration 26 [505.7 s]: NDCG = 0.768543, loss = 0.381077 [381.68 s]
Iteration 27 [507.8 s]: NDCG = 0.768387, loss = 0.380500 [381.02 s]
Iteration 28 [505.5 s]: NDCG = 0.768630, loss = 0.380774 [381.74 s]
Iteration 29 [508.7 s]: NDCG = 0.768511, loss = 0.379983 [380.69 s]
Iteration 30 [507.6 s]: NDCG = 0.768316, loss = 0.380068 [381.33 s]
Iteration 31 [506.2 s]: NDCG = 0.768330, loss = 0.379198 [380.99 s]
Iteration 32 [506.5 s]: NDCG = 0.768280, loss = 0.378987 [380.83 s]
Iteration 33 [506.9 s]: NDCG = 0.768463, loss = 0.378539 [380.40 s]
Iteration 34 [506.1 s]: NDCG = 0.768446, loss = 0.378645 [380.71 s]
Iteration 35 [518.0 s]: NDCG = 0.768256, loss = 0.378791 [381.22 s]
Iteration 36 [506.9 s]: NDCG = 0.768233, loss = 0.378482 [380.70 s]
Iteration 37 [505.6 s]: NDCG = 0.768328, loss = 0.378120 [380.48 s]
Iteration 38 [506.1 s]: NDCG = 0.768203, loss = 0.378058 [381.04 s]
Iteration 39 [504.8 s]: NDCG = 0.768383, loss = 0.377836 [380.92 s]
Iteration 40 [508.7 s]: NDCG = 0.768206, loss = 0.377416 [380.53 s]
Iteration 41 [506.1 s]: NDCG = 0.768286, loss = 0.377010 [380.28 s]
Iteration 42 [505.8 s]: NDCG = 0.768346, loss = 0.377191 [382.92 s]
Iteration 43 [506.6 s]: NDCG = 0.768243, loss = 0.377079 [380.19 s]
Iteration 44 [507.9 s]: NDCG = 0.768308, loss = 0.376556 [380.13 s]
Iteration 45 [505.9 s]: NDCG = 0.768459, loss = 0.376669 [380.03 s]
Iteration 46 [506.4 s]: NDCG = 0.768213, loss = 0.376501 [380.23 s]
Iteration 47 [507.5 s]: NDCG = 0.768253, loss = 0.375730 [379.57 s]
Iteration 48 [506.4 s]: NDCG = 0.768107, loss = 0.376134 [379.57 s]
Iteration 49 [506.8 s]: NDCG = 0.768204, loss = 0.375976 [379.35 s]
Iteration 50 [506.9 s]: NDCG = 0.768051, loss = 0.375816 [379.15 s]
Iteration 51 [504.6 s]: NDCG = 0.767875, loss = 0.375703 [379.64 s]
Iteration 52 [509.7 s]: NDCG = 0.767860, loss = 0.375877 [379.62 s]
Iteration 53 [506.2 s]: NDCG = 0.767704, loss = 0.375325 [379.52 s]
Iteration 54 [507.4 s]: NDCG = 0.767858, loss = 0.375089 [379.06 s]
Iteration 55 [505.6 s]: NDCG = 0.767913, loss = 0.374891 [379.27 s]
Iteration 56 [506.8 s]: NDCG = 0.767860, loss = 0.375087 [379.95 s]
Iteration 57 [506.3 s]: NDCG = 0.767999, loss = 0.374885 [379.51 s]
Iteration 58 [506.9 s]: NDCG = 0.767986, loss = 0.374156 [379.30 s]
Iteration 59 [505.0 s]: NDCG = 0.767977, loss = 0.374538 [379.61 s]
Iteration 60 [505.3 s]: NDCG = 0.767898, loss = 0.374151 [378.92 s]
Iteration 61 [509.8 s]: NDCG = 0.767886, loss = 0.374313 [378.48 s]
Iteration 62 [509.5 s]: NDCG = 0.767868, loss = 0.373793 [379.54 s]
Iteration 63 [507.0 s]: NDCG = 0.767834, loss = 0.373828 [378.54 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.000001,0.001,0.001,0.001]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.000001,0.001,0.001,0.001]', verbose=1) 
Load data done [33.7 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.689493 [68.7]
Iteration 0 [98.9 s]: NDCG = 0.721912, loss = 0.730125 [73.33 s]
Iteration 1 [93.9 s]: NDCG = 0.750466, loss = 0.530848 [104.28 s]
Iteration 2 [113.2 s]: NDCG = 0.761439, loss = 0.475140 [217.06 s]
Iteration 3 [130.7 s]: NDCG = 0.766530, loss = 0.445357 [271.40 s]
Iteration 4 [165.8 s]: NDCG = 0.767877, loss = 0.427343 [330.20 s]
Iteration 5 [146.4 s]: NDCG = 0.766977, loss = 0.416710 [356.10 s]
Iteration 6 [284.8 s]: NDCG = 0.766596, loss = 0.409072 [366.58 s]
Iteration 7 [431.0 s]: NDCG = 0.766563, loss = 0.404111 [390.06 s]
Iteration 8 [412.4 s]: NDCG = 0.766957, loss = 0.400550 [404.78 s]
Iteration 9 [436.9 s]: NDCG = 0.767041, loss = 0.397240 [404.94 s]
Iteration 10 [487.3 s]: NDCG = 0.767056, loss = 0.394312 [399.43 s]
Iteration 11 [516.5 s]: NDCG = 0.767253, loss = 0.392141 [401.24 s]
Iteration 12 [518.6 s]: NDCG = 0.767565, loss = 0.390384 [380.87 s]
Iteration 13 [511.9 s]: NDCG = 0.767482, loss = 0.388883 [370.58 s]
Iteration 14 [507.4 s]: NDCG = 0.767946, loss = 0.387465 [372.42 s]
Iteration 15 [531.2 s]: NDCG = 0.768138, loss = 0.386399 [409.44 s]
Iteration 16 [523.6 s]: NDCG = 0.767984, loss = 0.385526 [369.56 s]
Iteration 17 [508.3 s]: NDCG = 0.768072, loss = 0.384615 [369.50 s]
Iteration 18 [508.6 s]: NDCG = 0.768271, loss = 0.383583 [383.01 s]
Iteration 19 [528.3 s]: NDCG = 0.768354, loss = 0.382630 [408.26 s]
Iteration 20 [527.9 s]: NDCG = 0.768455, loss = 0.382218 [407.18 s]
Iteration 21 [527.4 s]: NDCG = 0.768665, loss = 0.381838 [409.77 s]
Iteration 22 [529.8 s]: NDCG = 0.768427, loss = 0.380865 [381.77 s]
Iteration 23 [510.9 s]: NDCG = 0.768666, loss = 0.380462 [371.05 s]
Iteration 24 [508.0 s]: NDCG = 0.768660, loss = 0.380465 [374.63 s]
Iteration 25 [519.1 s]: NDCG = 0.768736, loss = 0.379925 [378.42 s]
Iteration 26 [517.2 s]: NDCG = 0.768788, loss = 0.379554 [405.38 s]
Iteration 27 [523.7 s]: NDCG = 0.768739, loss = 0.378589 [405.00 s]
Iteration 28 [530.2 s]: NDCG = 0.768744, loss = 0.378135 [408.99 s]
Iteration 29 [531.6 s]: NDCG = 0.768616, loss = 0.378507 [405.86 s]
Iteration 30 [509.4 s]: NDCG = 0.768783, loss = 0.378219 [372.79 s]
Iteration 31 [517.6 s]: NDCG = 0.768862, loss = 0.377834 [369.41 s]
Iteration 32 [510.9 s]: NDCG = 0.768859, loss = 0.377828 [374.95 s]
Iteration 33 [516.0 s]: NDCG = 0.768685, loss = 0.376977 [370.06 s]
Iteration 34 [524.0 s]: NDCG = 0.768828, loss = 0.376957 [368.69 s]
Iteration 35 [510.3 s]: NDCG = 0.768806, loss = 0.376324 [375.95 s]
Iteration 36 [523.7 s]: NDCG = 0.768765, loss = 0.376181 [378.64 s]
Iteration 37 [520.4 s]: NDCG = 0.768926, loss = 0.376402 [380.11 s]
Iteration 38 [523.6 s]: NDCG = 0.768863, loss = 0.375794 [383.64 s]
Iteration 39 [544.5 s]: NDCG = 0.768862, loss = 0.375916 [411.95 s]
Iteration 40 [551.3 s]: NDCG = 0.768837, loss = 0.375414 [409.78 s]
Iteration 41 [550.4 s]: NDCG = 0.769058, loss = 0.375689 [415.70 s]
Iteration 42 [553.4 s]: NDCG = 0.768996, loss = 0.375031 [411.14 s]
Iteration 43 [534.8 s]: NDCG = 0.768693, loss = 0.375396 [377.78 s]
Iteration 44 [518.3 s]: NDCG = 0.768816, loss = 0.374426 [376.80 s]
Iteration 45 [524.1 s]: NDCG = 0.768930, loss = 0.374374 [383.46 s]
Iteration 46 [513.5 s]: NDCG = 0.768894, loss = 0.374316 [383.49 s]
Iteration 47 [517.1 s]: NDCG = 0.768854, loss = 0.374785 [368.90 s]
Iteration 48 [508.7 s]: NDCG = 0.768822, loss = 0.374621 [368.11 s]
Iteration 49 [507.5 s]: NDCG = 0.768902, loss = 0.373951 [369.45 s]
Iteration 50 [509.9 s]: NDCG = 0.768881, loss = 0.373770 [368.60 s]
Iteration 51 [510.7 s]: NDCG = 0.768765, loss = 0.373449 [369.52 s]
Iteration 52 [508.5 s]: NDCG = 0.768718, loss = 0.373959 [368.80 s]
Iteration 53 [509.1 s]: NDCG = 0.768702, loss = 0.373086 [369.47 s]
Iteration 54 [508.5 s]: NDCG = 0.768749, loss = 0.373495 [369.58 s]
Iteration 55 [509.5 s]: NDCG = 0.768636, loss = 0.372977 [369.60 s]
Iteration 56 [508.6 s]: NDCG = 0.768796, loss = 0.373061 [368.61 s]
Iteration 57 [508.0 s]: NDCG = 0.768850, loss = 0.373352 [369.74 s]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v3_random_train/MLP.py --learner adam --batch_size_random 1280000 --lr 0.00001 --reg_layers [0.000001,0.001,0.002,0.004]
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, path='Data/movielens/', reg_layers='[0.000001,0.001,0.002,0.004]', verbose=1) 
Load data done [34.3 s]. #user=13679, #item=12922, #train=3914489, #test=316795
Init: NDCG = 0.687199 [61.4]
Iteration 0 [92.3 s]: NDCG = 0.719112, loss = 0.798073 [62.86 s]
Iteration 1 [87.7 s]: NDCG = 0.753758, loss = 0.591259 [85.95 s]
Iteration 2 [106.5 s]: NDCG = 0.759977, loss = 0.522865 [191.86 s]
Iteration 3 [125.1 s]: NDCG = 0.761244, loss = 0.480056 [244.08 s]
Iteration 4 [163.5 s]: NDCG = 0.762026, loss = 0.450801 [273.68 s]
Iteration 5 [139.0 s]: NDCG = 0.762816, loss = 0.432967 [310.53 s]
Iteration 6 [274.9 s]: NDCG = 0.763785, loss = 0.421064 [317.89 s]
Iteration 7 [409.9 s]: NDCG = 0.764543, loss = 0.413529 [323.71 s]
Iteration 8 [394.5 s]: NDCG = 0.765114, loss = 0.408858 [327.95 s]
Iteration 9 [408.2 s]: NDCG = 0.765479, loss = 0.405493 [328.53 s]
Iteration 10 [465.6 s]: NDCG = 0.765744, loss = 0.401459 [329.79 s]
Iteration 11 [502.5 s]: NDCG = 0.765782, loss = 0.400106 [329.13 s]
Iteration 12 [500.7 s]: NDCG = 0.766251, loss = 0.397586 [329.41 s]
Iteration 13 [500.9 s]: NDCG = 0.766544, loss = 0.395747 [329.31 s]
Iteration 14 [504.1 s]: NDCG = 0.766833, loss = 0.394241 [329.64 s]
Iteration 15 [501.0 s]: NDCG = 0.766886, loss = 0.392866 [329.15 s]
Iteration 16 [500.6 s]: NDCG = 0.767381, loss = 0.391306 [329.44 s]
Iteration 17 [504.1 s]: NDCG = 0.767372, loss = 0.390414 [337.18 s]
Iteration 18 [503.3 s]: NDCG = 0.767556, loss = 0.389509 [329.13 s]
Iteration 19 [502.3 s]: NDCG = 0.767666, loss = 0.388721 [329.12 s]
Iteration 20 [502.2 s]: NDCG = 0.767648, loss = 0.387129 [329.44 s]
Iteration 21 [501.5 s]: NDCG = 0.767780, loss = 0.386995 [329.59 s]
Iteration 22 [502.2 s]: NDCG = 0.767760, loss = 0.386334 [331.25 s]
Iteration 23 [502.1 s]: NDCG = 0.767818, loss = 0.385449 [329.67 s]
Iteration 24 [503.6 s]: NDCG = 0.767912, loss = 0.385125 [329.20 s]
Iteration 25 [502.0 s]: NDCG = 0.767978, loss = 0.384307 [329.47 s]
Iteration 26 [500.6 s]: NDCG = 0.768052, loss = 0.384136 [329.51 s]
Iteration 27 [502.3 s]: NDCG = 0.768132, loss = 0.383322 [329.37 s]
Iteration 28 [503.1 s]: NDCG = 0.768240, loss = 0.383228 [329.65 s]
Iteration 29 [501.2 s]: NDCG = 0.768268, loss = 0.382166 [329.09 s]
Iteration 30 [502.6 s]: NDCG = 0.768348, loss = 0.381868 [329.19 s]
Iteration 31 [501.5 s]: NDCG = 0.768300, loss = 0.381676 [329.13 s]
Iteration 32 [502.3 s]: NDCG = 0.768271, loss = 0.381561 [329.20 s]
Iteration 33 [502.4 s]: NDCG = 0.768212, loss = 0.380546 [329.17 s]
Iteration 34 [502.4 s]: NDCG = 0.768235, loss = 0.381038 [329.46 s]
Iteration 35 [501.9 s]: NDCG = 0.768291, loss = 0.380209 [329.18 s]
Iteration 36 [503.2 s]: NDCG = 0.768272, loss = 0.380134 [329.28 s]
Iteration 37 [502.0 s]: NDCG = 0.768463, loss = 0.379719 [329.69 s]
Iteration 38 [501.2 s]: NDCG = 0.768442, loss = 0.379566 [329.19 s]
Iteration 39 [501.0 s]: NDCG = 0.768435, loss = 0.379165 [329.34 s]
Iteration 40 [502.3 s]: NDCG = 0.768386, loss = 0.379311 [330.00 s]
Iteration 41 [503.0 s]: NDCG = 0.768348, loss = 0.378759 [329.73 s]
Iteration 42 [502.9 s]: NDCG = 0.768379, loss = 0.378635 [329.50 s]
Iteration 43 [501.6 s]: NDCG = 0.768352, loss = 0.378342 [329.68 s]
Iteration 44 [504.4 s]: NDCG = 0.768375, loss = 0.377998 [329.34 s]
Iteration 45 [503.7 s]: NDCG = 0.768367, loss = 0.378536 [330.14 s]
Iteration 46 [505.0 s]: NDCG = 0.768332, loss = 0.377957 [331.03 s]
Iteration 47 [503.9 s]: NDCG = 0.768388, loss = 0.377589 [329.90 s]
Iteration 48 [502.1 s]: NDCG = 0.768269, loss = 0.377423 [330.16 s]
Iteration 49 [502.4 s]: NDCG = 0.768309, loss = 0.377159 [347.07 s]
Iteration 50 [523.9 s]: NDCG = 0.768328, loss = 0.377615 [368.53 s]
Iteration 51 [520.9 s]: NDCG = 0.768229, loss = 0.377451 [342.80 s]
Iteration 52 [504.0 s]: NDCG = 0.768135, loss = 0.376386 [337.16 s]



