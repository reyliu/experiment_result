liurui@ubuntu:~/neural_collaborative_filtering$ KERAS_BACKEND=theano python NeuMF.py --learner adam --dataset yelp
Using Theano backend.
NeuMF arguments: Namespace(batch_size=256, dataset='yelp', epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', num_factors=8, num_neg=4, out=1, path='Data/', reg_layers='[0,0,0,0]', reg_mf=0, verbose=1) 
Load data done [7.2 s]. #user=13679, #item=12922, #train=323348, #test=316795
Init: NDCG = 0.687736
Iteration 0 [81.4 s]: NDCG = 0.715403, loss = 0.4208 [19.1 s]
Iteration 1 [78.9 s]: NDCG = 0.713371, loss = 0.3119 [19.2 s]
Iteration 2 [78.8 s]: NDCG = 0.710929, loss = 0.2731 [19.1 s]
Iteration 3 [77.8 s]: NDCG = 0.705960, loss = 0.2532 [19.0 s]
Iteration 4 [78.0 s]: NDCG = 0.707411, loss = 0.2389 [18.3 s]
Iteration 5 [77.7 s]: NDCG = 0.706836, loss = 0.2282 [18.3 s]
Iteration 6 [77.7 s]: NDCG = 0.705149, loss = 0.2186 [18.3 s]
Iteration 7 [78.1 s]: NDCG = 0.704850, loss = 0.2095 [18.3 s]
Iteration 8 [78.0 s]: NDCG = 0.705287, loss = 0.2020 [18.3 s]
Iteration 9 [78.1 s]: NDCG = 0.705930, loss = 0.1945 [18.4 s]
Iteration 10 [78.1 s]: NDCG = 0.704829, loss = 0.1883 [18.2 s]
Iteration 11 [78.6 s]: NDCG = 0.703205, loss = 0.1820 [18.4 s]
Iteration 12 [78.6 s]: NDCG = 0.703319, loss = 0.1763 [18.2 s]
Iteration 13 [78.7 s]: NDCG = 0.703939, loss = 0.1706 [18.3 s]
Iteration 14 [78.4 s]: NDCG = 0.704582, loss = 0.1661 [18.6 s]



liurui@ubuntu:~/neural_collaborative_filtering$ KERAS_BACKEND=theano python NeuMF.py --learner adam --dataset yelp --reg_layers [0.00001,0.0001,0.001,0.01]
Using Theano backend.
NeuMF arguments: Namespace(batch_size=256, dataset='yelp', epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.001, mf_pretrain='', mlp_pretrain='', num_factors=8, num_neg=4, out=1, path='Data/', reg_layers='[0.00001,0.0001,0.001,0.01]', reg_mf=0, verbose=1) 
Load data done [7.3 s]. #user=13679, #item=12922, #train=323348, #test=316795
Init: NDCG = 0.689581
Iteration 0 [111.8 s]: NDCG = 0.715729, loss = 0.4566 [25.1 s]
Iteration 1 [110.5 s]: NDCG = 0.715039, loss = 0.3435 [24.9 s]
Iteration 2 [109.5 s]: NDCG = 0.712959, loss = 0.2999 [24.4 s]
Iteration 3 [109.6 s]: NDCG = 0.710467, loss = 0.2798 [24.6 s]
Iteration 4 [109.2 s]: NDCG = 0.709457, loss = 0.2670 [24.4 s]



liurui@ubuntu:~/neural_collaborative_filtering$ KERAS_BACKEND=theano python NeuMF.py --learner adam --dataset yelp --reg_layers [0.00001,0.0001,0.001,0.01] --lr 0.0001
Using Theano backend.
NeuMF arguments: Namespace(batch_size=256, dataset='yelp', epochs=100, layers='[64,32,16,8]', learner='adam', lr=0.0001, mf_pretrain='', mlp_pretrain='', num_factors=8, num_neg=4, out=1, path='Data/', reg_layers='[0.00001,0.0001,0.001,0.01]', reg_mf=0, verbose=1) 
Load data done [8.0 s]. #user=13679, #item=12922, #train=323348, #test=316795
Init: NDCG = 0.684048
Iteration 0 [99.3 s]: NDCG = 0.716496, loss = 0.5258 [24.1 s]
Iteration 1 [110.9 s]: NDCG = 0.717098, loss = 0.4566 [27.7 s]
Iteration 2 [116.8 s]: NDCG = 0.717294, loss = 0.4512 [27.5 s]
Iteration 3 [118.1 s]: NDCG = 0.718096, loss = 0.4437 [27.7 s]
Iteration 4 [118.0 s]: NDCG = 0.717276, loss = 0.4300 [28.0 s]
Iteration 5 [118.4 s]: NDCG = 0.717486, loss = 0.4116 [27.4 s]
Iteration 6 [114.6 s]: NDCG = 0.717461, loss = 0.3918 [25.3 s]
Iteration 7 [113.3 s]: NDCG = 0.716863, loss = 0.3728 [26.9 s]
Iteration 8 [113.6 s]: NDCG = 0.716977, loss = 0.3558 [25.5 s]
Iteration 9 [115.8 s]: NDCG = 0.717181, loss = 0.3419 [25.9 s]
Iteration 10 [116.0 s]: NDCG = 0.716702, loss = 0.3301 [26.7 s]
Iteration 11 [117.2 s]: NDCG = 0.716671, loss = 0.3210 [26.5 s]
Iteration 12 [116.8 s]: NDCG = 0.716657, loss = 0.3137 [27.2 s]


liurui@ubuntu:~/neural_collaborative_filtering$ KERAS_BACKEND=theano python NeuMF.py --learner adam --dataset yelp --reg_layers [0.00001,0.0001,0.001,0.01] --lr 0.00001
Using Theano backend.
NeuMF arguments: Namespace(batch_size=256, dataset='yelp', epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, mf_pretrain='', mlp_pretrain='', num_factors=8, num_neg=4, out=1, path='Data/', reg_layers='[0.00001,0.0001,0.001,0.01]', reg_mf=0, verbose=1) 
Load data done [8.1 s]. #user=13679, #item=12922, #train=323348, #test=316795
Init: NDCG = 0.692625
Iteration 0 [101.6 s]: NDCG = 0.715350, loss = 0.7452 [22.6 s]
Iteration 1 [97.7 s]: NDCG = 0.717591, loss = 0.5867 [22.7 s]
Iteration 2 [99.7 s]: NDCG = 0.717964, loss = 0.5306 [24.4 s]
Iteration 3 [102.6 s]: NDCG = 0.717810, loss = 0.4982 [25.3 s]
Iteration 4 [106.1 s]: NDCG = 0.717771, loss = 0.4809 [26.0 s]
Iteration 5 [109.9 s]: NDCG = 0.717479, loss = 0.4704 [26.2 s]
Iteration 6 [111.8 s]: NDCG = 0.717179, loss = 0.4642 [26.6 s]
Iteration 7 [114.7 s]: NDCG = 0.717600, loss = 0.4609 [26.5 s]
Iteration 8 [111.1 s]: NDCG = 0.717455, loss = 0.4587 [22.7 s]
Iteration 9 [110.6 s]: NDCG = 0.717225, loss = 0.4573 [22.6 s]
Iteration 10 [110.0 s]: NDCG = 0.716797, loss = 0.4557 [22.5 s]
Iteration 11 [109.9 s]: NDCG = 0.717542, loss = 0.4547 [22.6 s]
Iteration 12 [110.5 s]: NDCG = 0.717463, loss = 0.4540 [22.6 s]
Iteration 13 [110.0 s]: NDCG = 0.717725, loss = 0.4530 [22.6 s]
Iteration 14 [110.4 s]: NDCG = 0.717386, loss = 0.4522 [22.9 s]
Iteration 15 [110.1 s]: NDCG = 0.717495, loss = 0.4517 [22.6 s]
Iteration 16 [110.1 s]: NDCG = 0.717417, loss = 0.4511 [22.6 s]
Iteration 17 [110.4 s]: NDCG = 0.717045, loss = 0.4508 [22.9 s]
Iteration 18 [110.6 s]: NDCG = 0.717237, loss = 0.4502 [22.6 s]
Iteration 19 [115.4 s]: NDCG = 0.717083, loss = 0.4498 [26.9 s]
Iteration 20 [116.6 s]: NDCG = 0.717434, loss = 0.4493 [26.8 s]
Iteration 21 [116.8 s]: NDCG = 0.717424, loss = 0.4490 [27.0 s]
Iteration 22 [116.4 s]: NDCG = 0.717456, loss = 0.4488 [26.5 s]
Iteration 23 [116.6 s]: NDCG = 0.717504, loss = 0.4482 [26.8 s]
Iteration 24 [116.0 s]: NDCG = 0.717316, loss = 0.4478 [26.9 s]
Iteration 25 [116.4 s]: NDCG = 0.717360, loss = 0.4472 [26.5 s]
Iteration 26 [116.0 s]: NDCG = 0.717497, loss = 0.4469 [26.8 s]
Iteration 27 [116.6 s]: NDCG = 0.717496, loss = 0.4465 [26.4 s]
Iteration 28 [116.6 s]: NDCG = 0.717545, loss = 0.4459 [26.7 s]
Iteration 29 [116.6 s]: NDCG = 0.717570, loss = 0.4452 [26.5 s]
Iteration 30 [116.7 s]: NDCG = 0.717805, loss = 0.4444 [26.7 s]
Iteration 31 [116.5 s]: NDCG = 0.717894, loss = 0.4438 [26.8 s]
Iteration 32 [116.7 s]: NDCG = 0.717904, loss = 0.4433 [22.6 s]
Iteration 33 [111.3 s]: NDCG = 0.718001, loss = 0.4426 [26.8 s]
Iteration 34 [111.3 s]: NDCG = 0.718272, loss = 0.4417 [22.7 s]
Iteration 35 [112.5 s]: NDCG = 0.718325, loss = 0.4410 [22.6 s]
Iteration 36 [109.8 s]: NDCG = 0.718458, loss = 0.4401 [22.6 s]
Iteration 37 [110.3 s]: NDCG = 0.718368, loss = 0.4388 [22.7 s]
Iteration 38 [111.0 s]: NDCG = 0.718427, loss = 0.4380 [23.1 s]
Iteration 39 [111.4 s]: NDCG = 0.718425, loss = 0.4367 [22.6 s]
Iteration 40 [110.2 s]: NDCG = 0.718520, loss = 0.4355 [22.7 s]
Iteration 41 [110.0 s]: NDCG = 0.718441, loss = 0.4345 [22.8 s]
Iteration 42 [110.1 s]: NDCG = 0.718588, loss = 0.4332 [22.6 s]
Iteration 43 [110.6 s]: NDCG = 0.718626, loss = 0.4321 [22.7 s]
Iteration 44 [109.8 s]: NDCG = 0.718547, loss = 0.4306 [22.6 s]
Iteration 45 [110.9 s]: NDCG = 0.718665, loss = 0.4291 [24.0 s]
Iteration 46 [110.8 s]: NDCG = 0.718435, loss = 0.4277 [22.5 s]
Iteration 47 [111.5 s]: NDCG = 0.718653, loss = 0.4262 [23.6 s]
Iteration 48 [111.7 s]: NDCG = 0.718667, loss = 0.4246 [22.5 s]
Iteration 49 [110.1 s]: NDCG = 0.718810, loss = 0.4229 [24.5 s]
Iteration 50 [114.0 s]: NDCG = 0.719004, loss = 0.4215 [22.8 s]
Iteration 51 [110.9 s]: NDCG = 0.718955, loss = 0.4197 [22.7 s]
Iteration 52 [110.4 s]: NDCG = 0.718767, loss = 0.4182 [22.8 s]
Iteration 53 [109.8 s]: NDCG = 0.718906, loss = 0.4164 [22.7 s]
Iteration 54 [115.8 s]: NDCG = 0.718885, loss = 0.4146 [25.2 s]
Iteration 55 [117.2 s]: NDCG = 0.719010, loss = 0.4130 [25.1 s]
Iteration 56 [110.5 s]: NDCG = 0.718997, loss = 0.4110 [27.1 s]
Iteration 57 [120.3 s]: NDCG = 0.718985, loss = 0.4095 [27.4 s]
Iteration 58 [119.8 s]: NDCG = 0.719022, loss = 0.4075 [27.5 s]
Iteration 59 [119.8 s]: NDCG = 0.719020, loss = 0.4058 [27.5 s]
Iteration 60 [119.9 s]: NDCG = 0.719025, loss = 0.4041 [27.7 s]
Iteration 61 [119.7 s]: NDCG = 0.719216, loss = 0.4023 [27.4 s]
Iteration 62 [120.6 s]: NDCG = 0.719120, loss = 0.4005 [27.5 s]
Iteration 63 [120.2 s]: NDCG = 0.719079, loss = 0.3989 [27.3 s]
Iteration 64 [119.9 s]: NDCG = 0.719080, loss = 0.3967 [27.4 s]
Iteration 65 [119.6 s]: NDCG = 0.719077, loss = 0.3950 [27.3 s]
Iteration 66 [120.0 s]: NDCG = 0.719172, loss = 0.3933 [27.5 s]
Iteration 67 [119.7 s]: NDCG = 0.719230, loss = 0.3916 [27.4 s]
Iteration 68 [118.4 s]: NDCG = 0.719218, loss = 0.3899 [25.9 s]
Iteration 69 [118.5 s]: NDCG = 0.719156, loss = 0.3881 [27.5 s]
Iteration 70 [119.6 s]: NDCG = 0.719217, loss = 0.3862 [27.4 s]
Iteration 71 [120.0 s]: NDCG = 0.719140, loss = 0.3848 [28.0 s]
Iteration 72 [120.7 s]: NDCG = 0.719148, loss = 0.3832 [27.5 s]
Iteration 73 [111.8 s]: NDCG = 0.719234, loss = 0.3816 [22.6 s]
Iteration 74 [109.8 s]: NDCG = 0.719059, loss = 0.3800 [22.6 s]
Iteration 75 [111.0 s]: NDCG = 0.718898, loss = 0.3780 [22.8 s]
Iteration 76 [110.1 s]: NDCG = 0.718642, loss = 0.3764 [22.6 s]
Iteration 77 [110.2 s]: NDCG = 0.718622, loss = 0.3750 [22.6 s]
Iteration 78 [110.0 s]: NDCG = 0.718667, loss = 0.3736 [22.6 s]
Iteration 79 [109.7 s]: NDCG = 0.718651, loss = 0.3721 [22.6 s]
Iteration 80 [110.3 s]: NDCG = 0.718770, loss = 0.3703 [22.5 s]
Iteration 81 [109.9 s]: NDCG = 0.718697, loss = 0.3689 [24.4 s]
Iteration 82 [110.4 s]: NDCG = 0.718668, loss = 0.3673 [22.6 s]
Iteration 83 [109.8 s]: NDCG = 0.718701, loss = 0.3657 [22.6 s]
Iteration 84 [110.5 s]: NDCG = 0.718764, loss = 0.3645 [22.7 s]


liurui@ubuntu:~/neural_collaborative_filtering$ KERAS_BACKEND=theano python NeuMF.py --learner adam --dataset yelp --reg_layers [0.000001,0.0001,0.001,0.01] --lr 0.00001
Using Theano backend.
NeuMF arguments: Namespace(batch_size=256, dataset='yelp', epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, mf_pretrain='', mlp_pretrain='', num_factors=8, num_neg=4, out=1, path='Data/', reg_layers='[0.000001,0.0001,0.001,0.01]', reg_mf=0, verbose=1) 
Load data done [7.5 s]. #user=13679, #item=12922, #train=323348, #test=316795
Init: NDCG = 0.688661
Iteration 0 [97.0 s]: NDCG = 0.714953, loss = 0.7567 [20.6 s]
Iteration 1 [93.4 s]: NDCG = 0.716855, loss = 0.5932 [19.8 s]
Iteration 2 [94.4 s]: NDCG = 0.717311, loss = 0.5300 [21.1 s]
Iteration 3 [103.9 s]: NDCG = 0.717592, loss = 0.4957 [22.7 s]
Iteration 4 [114.1 s]: NDCG = 0.717594, loss = 0.4774 [22.5 s]
Iteration 5 [109.2 s]: NDCG = 0.717638, loss = 0.4668 [22.3 s]
Iteration 6 [110.8 s]: NDCG = 0.717258, loss = 0.4607 [23.1 s]
Iteration 7 [109.0 s]: NDCG = 0.717378, loss = 0.4570 [22.1 s]
Iteration 8 [108.6 s]: NDCG = 0.717272, loss = 0.4550 [22.0 s]
Iteration 9 [108.2 s]: NDCG = 0.717320, loss = 0.4533 [21.8 s]
Iteration 10 [108.4 s]: NDCG = 0.717296, loss = 0.4520 [22.0 s]
Iteration 11 [108.3 s]: NDCG = 0.717410, loss = 0.4509 [21.8 s]
Iteration 12 [108.2 s]: NDCG = 0.717268, loss = 0.4500 [21.8 s]
Iteration 13 [108.7 s]: NDCG = 0.717274, loss = 0.4492 [21.8 s]
Iteration 14 [108.6 s]: NDCG = 0.717194, loss = 0.4484 [21.7 s]
Iteration 15 [108.9 s]: NDCG = 0.717008, loss = 0.4479 [21.9 s]
Iteration 16 [109.0 s]: NDCG = 0.717114, loss = 0.4472 [21.9 s]
Iteration 17 [108.7 s]: NDCG = 0.717113, loss = 0.4469 [21.8 s]
Iteration 18 [108.6 s]: NDCG = 0.717197, loss = 0.4464 [21.8 s]
Iteration 19 [108.5 s]: NDCG = 0.716975, loss = 0.4457 [21.9 s]
Iteration 20 [108.8 s]: NDCG = 0.717134, loss = 0.4455 [21.9 s]
Iteration 21 [108.5 s]: NDCG = 0.717207, loss = 0.4446 [21.9 s]
Iteration 22 [108.4 s]: NDCG = 0.717262, loss = 0.4443 [21.8 s]
Iteration 23 [108.8 s]: NDCG = 0.717357, loss = 0.4438 [23.0 s]
Iteration 24 [109.3 s]: NDCG = 0.717172, loss = 0.4433 [21.8 s]
Iteration 25 [108.9 s]: NDCG = 0.717505, loss = 0.4431 [22.0 s]
Iteration 26 [109.2 s]: NDCG = 0.717413, loss = 0.4423 [22.0 s]
Iteration 27 [109.3 s]: NDCG = 0.717442, loss = 0.4417 [21.7 s]
Iteration 28 [108.2 s]: NDCG = 0.717401, loss = 0.4410 [21.8 s]
Iteration 29 [108.5 s]: NDCG = 0.717424, loss = 0.4404 [21.8 s]
Iteration 30 [108.7 s]: NDCG = 0.717483, loss = 0.4399 [21.7 s]
Iteration 31 [109.0 s]: NDCG = 0.717338, loss = 0.4390 [21.8 s]
Iteration 32 [108.5 s]: NDCG = 0.717423, loss = 0.4381 [23.2 s]
Iteration 33 [109.2 s]: NDCG = 0.717513, loss = 0.4373 [22.0 s]
Iteration 34 [108.8 s]: NDCG = 0.717691, loss = 0.4367 [21.8 s]
Iteration 35 [109.5 s]: NDCG = 0.717770, loss = 0.4355 [21.9 s]
Iteration 36 [111.2 s]: NDCG = 0.717647, loss = 0.4349 [23.6 s]
Iteration 37 [111.3 s]: NDCG = 0.717842, loss = 0.4335 [22.8 s]
Iteration 38 [110.6 s]: NDCG = 0.717896, loss = 0.4324 [22.3 s]
Iteration 39 [108.6 s]: NDCG = 0.717908, loss = 0.4312 [21.7 s]
Iteration 40 [108.8 s]: NDCG = 0.718004, loss = 0.4299 [21.8 s]
Iteration 41 [108.6 s]: NDCG = 0.717911, loss = 0.4287 [21.9 s]
Iteration 42 [108.6 s]: NDCG = 0.717972, loss = 0.4273 [21.8 s]
Iteration 43 [108.3 s]: NDCG = 0.717856, loss = 0.4259 [21.8 s]
Iteration 44 [108.5 s]: NDCG = 0.718102, loss = 0.4245 [21.6 s]
Iteration 45 [108.3 s]: NDCG = 0.718191, loss = 0.4230 [21.7 s]
Iteration 46 [109.5 s]: NDCG = 0.718241, loss = 0.4213 [23.0 s]
Iteration 47 [109.6 s]: NDCG = 0.718164, loss = 0.4198 [21.7 s]
Iteration 48 [111.6 s]: NDCG = 0.718139, loss = 0.4182 [25.5 s]
Iteration 49 [115.5 s]: NDCG = 0.718267, loss = 0.4165 [26.1 s]
Iteration 50 [115.6 s]: NDCG = 0.718256, loss = 0.4150 [25.9 s]
Iteration 51 [116.0 s]: NDCG = 0.718310, loss = 0.4133 [24.2 s]
Iteration 52 [111.9 s]: NDCG = 0.718233, loss = 0.4115 [24.1 s]
Iteration 53 [114.9 s]: NDCG = 0.718194, loss = 0.4096 [25.9 s]
Iteration 54 [115.4 s]: NDCG = 0.718338, loss = 0.4078 [25.6 s]
Iteration 55 [115.3 s]: NDCG = 0.718319, loss = 0.4063 [25.9 s]
Iteration 56 [115.3 s]: NDCG = 0.718229, loss = 0.4043 [25.8 s]
Iteration 57 [115.0 s]: NDCG = 0.718266, loss = 0.4023 [25.7 s]
Iteration 58 [113.8 s]: NDCG = 0.718337, loss = 0.4008 [21.7 s]
Iteration 59 [108.4 s]: NDCG = 0.718497, loss = 0.3989 [21.8 s]
Iteration 60 [108.9 s]: NDCG = 0.718401, loss = 0.3970 [21.6 s]
Iteration 61 [108.8 s]: NDCG = 0.718435, loss = 0.3950 [21.8 s]
Iteration 62 [109.7 s]: NDCG = 0.718526, loss = 0.3932 [21.9 s]
Iteration 63 [108.7 s]: NDCG = 0.718552, loss = 0.3916 [22.0 s]
Iteration 64 [109.0 s]: NDCG = 0.718557, loss = 0.3896 [21.8 s]
Iteration 65 [108.5 s]: NDCG = 0.718541, loss = 0.3879 [21.9 s]
Iteration 66 [108.3 s]: NDCG = 0.718648, loss = 0.3861 [21.8 s]
Iteration 67 [108.5 s]: NDCG = 0.718540, loss = 0.3842 [21.8 s]
Iteration 68 [108.7 s]: NDCG = 0.718524, loss = 0.3824 [21.8 s]
Iteration 69 [109.1 s]: NDCG = 0.718455, loss = 0.3806 [21.9 s]
Iteration 70 [108.5 s]: NDCG = 0.718502, loss = 0.3789 [21.9 s]
Iteration 71 [108.7 s]: NDCG = 0.718479, loss = 0.3772 [21.8 s]
Iteration 72 [108.8 s]: NDCG = 0.718483, loss = 0.3753 [21.9 s]
Iteration 73 [109.7 s]: NDCG = 0.718596, loss = 0.3740 [21.9 s]
Iteration 74 [109.7 s]: NDCG = 0.718742, loss = 0.3721 [21.9 s]
Iteration 75 [108.6 s]: NDCG = 0.718744, loss = 0.3706 [22.5 s]
Iteration 76 [108.8 s]: NDCG = 0.718596, loss = 0.3689 [21.7 s]
Iteration 77 [109.1 s]: NDCG = 0.718545, loss = 0.3673 [21.8 s]
Iteration 78 [108.5 s]: NDCG = 0.718506, loss = 0.3654 [22.6 s]



liurui@ubuntu:~/neural_collaborative_filtering$ KERAS_BACKEND=theano python NeuMF.py --learner adam --dataset yelp --reg_layers [0.000001,0.001,0.001,0.001] --lr 0.00001
Using Theano backend.
NeuMF arguments: Namespace(batch_size=256, dataset='yelp', epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, mf_pretrain='', mlp_pretrain='', num_factors=8, num_neg=4, out=1, path='Data/', reg_layers='[0.000001,0.001,0.001,0.001]', reg_mf=0, verbose=1) 
Load data done [7.5 s]. #user=13679, #item=12922, #train=323348, #test=316795
Init: NDCG = 0.688863
Iteration 0 [94.1 s]: NDCG = 0.712555, loss = 0.7098 [19.0 s]
Iteration 1 [90.5 s]: NDCG = 0.716727, loss = 0.5697 [19.6 s]
Iteration 2 [95.5 s]: NDCG = 0.717027, loss = 0.5035 [21.9 s]
Iteration 3 [99.5 s]: NDCG = 0.717078, loss = 0.4795 [22.4 s]
Iteration 4 [102.7 s]: NDCG = 0.717285, loss = 0.4663 [22.6 s]
Iteration 5 [106.0 s]: NDCG = 0.717432, loss = 0.4608 [22.7 s]
Iteration 6 [107.4 s]: NDCG = 0.717385, loss = 0.4575 [22.8 s]
Iteration 7 [107.5 s]: NDCG = 0.717537, loss = 0.4553 [23.1 s]
Iteration 8 [108.4 s]: NDCG = 0.717538, loss = 0.4540 [22.4 s]
Iteration 9 [107.9 s]: NDCG = 0.717320, loss = 0.4523 [22.2 s]
Iteration 10 [107.8 s]: NDCG = 0.717543, loss = 0.4513 [22.2 s]
Iteration 11 [107.9 s]: NDCG = 0.717302, loss = 0.4504 [22.2 s]
Iteration 12 [108.7 s]: NDCG = 0.717280, loss = 0.4496 [22.2 s]
Iteration 13 [108.1 s]: NDCG = 0.717324, loss = 0.4487 [22.2 s]
Iteration 14 [108.8 s]: NDCG = 0.717272, loss = 0.4483 [22.2 s]
Iteration 15 [108.3 s]: NDCG = 0.717176, loss = 0.4475 [22.2 s]
Iteration 16 [108.4 s]: NDCG = 0.717270, loss = 0.4469 [22.3 s]
Iteration 17 [108.6 s]: NDCG = 0.717262, loss = 0.4468 [22.2 s]
Iteration 18 [108.5 s]: NDCG = 0.716979, loss = 0.4460 [22.3 s]
Iteration 19 [108.4 s]: NDCG = 0.716996, loss = 0.4458 [22.2 s]
Iteration 20 [109.1 s]: NDCG = 0.716885, loss = 0.4455 [22.2 s]
Iteration 21 [108.9 s]: NDCG = 0.716815, loss = 0.4450 [22.2 s]
Iteration 22 [108.2 s]: NDCG = 0.716907, loss = 0.4447 [22.2 s]
Iteration 23 [108.3 s]: NDCG = 0.717164, loss = 0.4444 [22.3 s]
Iteration 24 [108.4 s]: NDCG = 0.717002, loss = 0.4437 [22.2 s]
Iteration 25 [108.4 s]: NDCG = 0.717005, loss = 0.4435 [22.2 s]
Iteration 26 [109.3 s]: NDCG = 0.716893, loss = 0.4428 [22.3 s]
Iteration 27 [108.3 s]: NDCG = 0.717056, loss = 0.4421 [22.3 s]
Iteration 28 [108.5 s]: NDCG = 0.717319, loss = 0.4418 [22.1 s]
Iteration 29 [108.6 s]: NDCG = 0.717357, loss = 0.4411 [22.2 s]
Iteration 30 [108.9 s]: NDCG = 0.717559, loss = 0.4404 [22.6 s]
Iteration 31 [108.8 s]: NDCG = 0.717642, loss = 0.4399 [22.3 s]
Iteration 32 [108.2 s]: NDCG = 0.717709, loss = 0.4392 [22.3 s]
Iteration 33 [111.0 s]: NDCG = 0.717707, loss = 0.4384 [22.3 s]
Iteration 34 [108.5 s]: NDCG = 0.717676, loss = 0.4373 [22.2 s]
Iteration 35 [108.9 s]: NDCG = 0.717773, loss = 0.4364 [22.4 s]
Iteration 36 [108.5 s]: NDCG = 0.717801, loss = 0.4357 [22.4 s]
Iteration 37 [108.7 s]: NDCG = 0.717932, loss = 0.4347 [22.3 s]
Iteration 38 [108.7 s]: NDCG = 0.718063, loss = 0.4334 [22.3 s]
Iteration 39 [108.6 s]: NDCG = 0.718063, loss = 0.4325 [22.4 s]
Iteration 40 [109.7 s]: NDCG = 0.718138, loss = 0.4315 [22.5 s]
Iteration 41 [108.4 s]: NDCG = 0.718273, loss = 0.4299 [22.3 s]
Iteration 42 [108.4 s]: NDCG = 0.718371, loss = 0.4287 [22.3 s]
Iteration 43 [108.5 s]: NDCG = 0.718349, loss = 0.4272 [22.6 s]
Iteration 44 [111.3 s]: NDCG = 0.718355, loss = 0.4260 [22.3 s]
Iteration 45 [109.1 s]: NDCG = 0.718545, loss = 0.4246 [22.3 s]
Iteration 46 [108.4 s]: NDCG = 0.718498, loss = 0.4230 [22.4 s]
Iteration 47 [108.5 s]: NDCG = 0.718523, loss = 0.4213 [22.4 s]
Iteration 48 [108.6 s]: NDCG = 0.718495, loss = 0.4198 [22.3 s]
Iteration 49 [109.1 s]: NDCG = 0.718398, loss = 0.4178 [22.4 s]
Iteration 50 [108.9 s]: NDCG = 0.718405, loss = 0.4163 [22.4 s]
Iteration 51 [108.3 s]: NDCG = 0.718363, loss = 0.4147 [22.3 s]
Iteration 52 [108.5 s]: NDCG = 0.718245, loss = 0.4124 [22.2 s]
Iteration 53 [109.0 s]: NDCG = 0.718167, loss = 0.4107 [22.4 s]
Iteration 54 [108.2 s]: NDCG = 0.718120, loss = 0.4093 [22.4 s]
Iteration 55 [109.0 s]: NDCG = 0.718005, loss = 0.4071 [22.3 s]
Iteration 56 [108.3 s]: NDCG = 0.718124, loss = 0.4055 [22.2 s]
Iteration 57 [108.3 s]: NDCG = 0.718065, loss = 0.4036 [22.4 s]
Iteration 58 [108.4 s]: NDCG = 0.718028, loss = 0.4015 [22.3 s]
Iteration 59 [108.5 s]: NDCG = 0.718011, loss = 0.3993 [22.3 s]
Iteration 60 [108.2 s]: NDCG = 0.718021, loss = 0.3976 [22.4 s]
Iteration 61 [108.6 s]: NDCG = 0.717976, loss = 0.3959 [22.4 s]
Iteration 62 [108.3 s]: NDCG = 0.718049, loss = 0.3939 [22.4 s]
Iteration 63 [108.6 s]: NDCG = 0.718108, loss = 0.3918 [22.3 s]
Iteration 64 [108.6 s]: NDCG = 0.718245, loss = 0.3900 [22.4 s]
Iteration 65 [108.5 s]: NDCG = 0.718170, loss = 0.3883 [22.4 s]
Iteration 66 [108.9 s]: NDCG = 0.718157, loss = 0.3861 [22.3 s]
Iteration 67 [108.6 s]: NDCG = 0.718206, loss = 0.3840 [22.3 s]
Iteration 68 [109.4 s]: NDCG = 0.718287, loss = 0.3826 [22.3 s]
Iteration 69 [108.4 s]: NDCG = 0.718319, loss = 0.3807 [22.4 s]
Iteration 70 [108.2 s]: NDCG = 0.718277, loss = 0.3789 [22.3 s]
Iteration 71 [108.4 s]: NDCG = 0.718151, loss = 0.3769 [22.3 s]
Iteration 72 [109.1 s]: NDCG = 0.718135, loss = 0.3751 [22.4 s]
Iteration 73 [108.5 s]: NDCG = 0.718103, loss = 0.3731 [22.3 s]
Iteration 74 [108.3 s]: NDCG = 0.718029, loss = 0.3716 [22.2 s]
Iteration 75 [108.2 s]: NDCG = 0.717908, loss = 0.3698 [22.3 s]
Iteration 76 [108.9 s]: NDCG = 0.717859, loss = 0.3683 [22.3 s]
Iteration 77 [108.5 s]: NDCG = 0.717836, loss = 0.3662 [22.3 s]
Iteration 78 [108.3 s]: NDCG = 0.717820, loss = 0.3651 [22.4 s]
Iteration 79 [108.8 s]: NDCG = 0.717774, loss = 0.3632 [22.3 s]
Iteration 80 [108.3 s]: NDCG = 0.717795, loss = 0.3615 [22.4 s]
Iteration 81 [108.6 s]: NDCG = 0.717793, loss = 0.3599 [22.3 s]
Iteration 82 [108.5 s]: NDCG = 0.717845, loss = 0.3581 [22.3 s]
Iteration 83 [108.7 s]: NDCG = 0.717968, loss = 0.3564 [22.3 s]
Iteration 84 [108.6 s]: NDCG = 0.717811, loss = 0.3549 [22.3 s]
Iteration 85 [108.2 s]: NDCG = 0.717856, loss = 0.3536 [22.5 s]
Iteration 86 [108.4 s]: NDCG = 0.717863, loss = 0.3516 [22.2 s]
Iteration 87 [108.2 s]: NDCG = 0.717930, loss = 0.3500 [22.2 s]
Iteration 88 [108.1 s]: NDCG = 0.717791, loss = 0.3486 [22.3 s]
Iteration 89 [108.2 s]: NDCG = 0.717874, loss = 0.3475 [22.3 s]
Iteration 90 [108.2 s]: NDCG = 0.717860, loss = 0.3457 [22.3 s]
Iteration 91 [109.5 s]: NDCG = 0.717824, loss = 0.3445 [22.3 s]
Iteration 92 [108.6 s]: NDCG = 0.717825, loss = 0.3432 [22.4 s]
Iteration 93 [108.2 s]: NDCG = 0.717703, loss = 0.3415 [22.2 s]
Iteration 94 [108.6 s]: NDCG = 0.717666, loss = 0.3402 [22.4 s]
Iteration 95 [109.0 s]: NDCG = 0.717690, loss = 0.3388 [22.3 s]
Iteration 96 [108.3 s]: NDCG = 0.717694, loss = 0.3375 [22.2 s]
Iteration 97 [108.1 s]: NDCG = 0.717663, loss = 0.3364 [22.2 s]
Iteration 98 [108.1 s]: NDCG = 0.717670, loss = 0.3347 [22.2 s]
Iteration 99 [108.2 s]: NDCG = 0.717637, loss = 0.3337 [22.3 s]
End. Best Iteration 45:  NDCG = 0.718545. 
The best NeuMF model is saved to Pretrain/yelp_NeuMF_8_[64,32,16,8]_1511442683.h5


liurui@ubuntu:~/neural_collaborative_filtering$ KERAS_BACKEND=theano python NeuMF.py --learner adam --dataset yelp --reg_layers [0.00001,0.001,0.001,0.001] --lr 0.00001
Using Theano backend.
NeuMF arguments: Namespace(batch_size=256, dataset='yelp', epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, mf_pretrain='', mlp_pretrain='', num_factors=8, num_neg=4, out=1, path='Data/', reg_layers='[0.00001,0.001,0.001,0.001]', reg_mf=0, verbose=1) 
Load data done [7.9 s]. #user=13679, #item=12922, #train=323348, #test=316795
Init: NDCG = 0.688341
Iteration 0 [96.0 s]: NDCG = 0.714822, loss = 0.7010 [21.9 s]
Iteration 1 [92.1 s]: NDCG = 0.717255, loss = 0.5522 [19.5 s]
Iteration 2 [93.8 s]: NDCG = 0.717466, loss = 0.5035 [20.9 s]
Iteration 3 [97.1 s]: NDCG = 0.717188, loss = 0.4809 [21.3 s]
Iteration 4 [100.3 s]: NDCG = 0.717655, loss = 0.4699 [21.5 s]
Iteration 5 [104.0 s]: NDCG = 0.718050, loss = 0.4643 [21.7 s]
Iteration 6 [105.0 s]: NDCG = 0.717999, loss = 0.4611 [21.6 s]
Iteration 7 [106.9 s]: NDCG = 0.717712, loss = 0.4589 [21.7 s]
Iteration 8 [106.6 s]: NDCG = 0.717707, loss = 0.4574 [21.7 s]
Iteration 9 [107.5 s]: NDCG = 0.717559, loss = 0.4563 [21.6 s]
Iteration 10 [107.0 s]: NDCG = 0.717853, loss = 0.4554 [21.7 s]
Iteration 11 [118.1 s]: NDCG = 0.717710, loss = 0.4544 [22.4 s]
Iteration 12 [107.8 s]: NDCG = 0.718091, loss = 0.4535 [21.8 s]
Iteration 13 [107.8 s]: NDCG = 0.718211, loss = 0.4530 [22.1 s]
Iteration 14 [108.9 s]: NDCG = 0.718427, loss = 0.4522 [22.2 s]
Iteration 15 [111.3 s]: NDCG = 0.718264, loss = 0.4515 [23.0 s]
Iteration 16 [110.4 s]: NDCG = 0.718184, loss = 0.4512 [22.0 s]
Iteration 17 [108.6 s]: NDCG = 0.718413, loss = 0.4510 [21.9 s]
Iteration 18 [108.8 s]: NDCG = 0.718405, loss = 0.4503 [22.7 s]
Iteration 19 [110.6 s]: NDCG = 0.718665, loss = 0.4499 [22.2 s]
Iteration 20 [109.8 s]: NDCG = 0.718698, loss = 0.4496 [23.0 s]
Iteration 21 [109.2 s]: NDCG = 0.718909, loss = 0.4490 [21.9 s]
Iteration 22 [108.4 s]: NDCG = 0.719051, loss = 0.4489 [21.6 s]
Iteration 23 [106.9 s]: NDCG = 0.719046, loss = 0.4484 [21.7 s]
Iteration 24 [107.2 s]: NDCG = 0.719215, loss = 0.4477 [21.8 s]
Iteration 25 [107.3 s]: NDCG = 0.719127, loss = 0.4473 [21.6 s]
Iteration 26 [114.9 s]: NDCG = 0.719200, loss = 0.4469 [22.6 s]
Iteration 27 [113.9 s]: NDCG = 0.719285, loss = 0.4463 [22.3 s]
Iteration 28 [112.2 s]: NDCG = 0.719397, loss = 0.4458 [22.5 s]
Iteration 29 [114.6 s]: NDCG = 0.719611, loss = 0.4452 [22.6 s]
Iteration 30 [113.0 s]: NDCG = 0.719408, loss = 0.4445 [22.4 s]
Iteration 31 [114.1 s]: NDCG = 0.719418, loss = 0.4439 [22.4 s]
Iteration 32 [112.7 s]: NDCG = 0.719489, loss = 0.4432 [22.1 s]
Iteration 33 [107.6 s]: NDCG = 0.719382, loss = 0.4424 [21.8 s]
Iteration 34 [107.0 s]: NDCG = 0.719325, loss = 0.4417 [21.8 s]
Iteration 35 [107.5 s]: NDCG = 0.719465, loss = 0.4409 [21.7 s]
Iteration 36 [107.3 s]: NDCG = 0.719280, loss = 0.4398 [21.6 s]
Iteration 37 [107.1 s]: NDCG = 0.719399, loss = 0.4390 [21.7 s]
Iteration 38 [106.9 s]: NDCG = 0.719460, loss = 0.4379 [21.8 s]
Iteration 39 [107.0 s]: NDCG = 0.719477, loss = 0.4367 [21.7 s]
Iteration 40 [110.1 s]: NDCG = 0.719406, loss = 0.4360 [21.8 s]
Iteration 41 [107.1 s]: NDCG = 0.719447, loss = 0.4345 [21.7 s]
Iteration 42 [107.5 s]: NDCG = 0.719447, loss = 0.4334 [21.6 s]
Iteration 43 [106.7 s]: NDCG = 0.719473, loss = 0.4320 [21.8 s]
Iteration 44 [107.1 s]: NDCG = 0.719537, loss = 0.4310 [22.1 s]
Iteration 45 [106.9 s]: NDCG = 0.719486, loss = 0.4296 [21.7 s]
Iteration 46 [107.1 s]: NDCG = 0.719495, loss = 0.4281 [21.6 s]
Iteration 47 [107.0 s]: NDCG = 0.719407, loss = 0.4267 [21.6 s]
Iteration 48 [107.5 s]: NDCG = 0.719446, loss = 0.4253 [21.7 s]
Iteration 49 [108.4 s]: NDCG = 0.719366, loss = 0.4237 [21.6 s]
Iteration 50 [107.5 s]: NDCG = 0.719554, loss = 0.4224 [22.5 s]
Iteration 51 [112.7 s]: NDCG = 0.719432, loss = 0.4207 [23.9 s]
Iteration 52 [113.5 s]: NDCG = 0.719473, loss = 0.4190 [21.9 s]
Iteration 53 [107.2 s]: NDCG = 0.719481, loss = 0.4177 [22.1 s]
Iteration 54 [108.5 s]: NDCG = 0.719470, loss = 0.4157 [21.6 s]
Iteration 55 [109.3 s]: NDCG = 0.719555, loss = 0.4142 [25.4 s]
Iteration 56 [111.9 s]: NDCG = 0.719451, loss = 0.4124 [24.9 s]
Iteration 57 [111.7 s]: NDCG = 0.719326, loss = 0.4108 [24.8 s]
Iteration 58 [112.3 s]: NDCG = 0.719238, loss = 0.4092 [25.3 s]
Iteration 59 [108.2 s]: NDCG = 0.719249, loss = 0.4074 [21.6 s]
Iteration 60 [108.4 s]: NDCG = 0.719278, loss = 0.4058 [22.8 s]
Iteration 61 [109.7 s]: NDCG = 0.719216, loss = 0.4040 [22.4 s]
Iteration 62 [111.1 s]: NDCG = 0.719155, loss = 0.4024 [22.8 s]
Iteration 63 [110.3 s]: NDCG = 0.719270, loss = 0.4007 [22.4 s]
Iteration 64 [110.9 s]: NDCG = 0.719111, loss = 0.3991 [22.9 s]
Iteration 65 [110.4 s]: NDCG = 0.719095, loss = 0.3971 [22.3 s]
Iteration 66 [109.1 s]: NDCG = 0.719045, loss = 0.3954 [22.7 s]
Iteration 67 [109.6 s]: NDCG = 0.719110, loss = 0.3940 [22.5 s]
Iteration 68 [108.4 s]: NDCG = 0.719059, loss = 0.3922 [22.2 s]
Iteration 69 [108.2 s]: NDCG = 0.718987, loss = 0.3907 [22.2 s]
Iteration 70 [108.6 s]: NDCG = 0.718816, loss = 0.3889 [23.5 s]
Iteration 71 [108.4 s]: NDCG = 0.718839, loss = 0.3874 [22.0 s]
Iteration 72 [110.6 s]: NDCG = 0.718913, loss = 0.3859 [22.8 s]
Iteration 73 [108.9 s]: NDCG = 0.718735, loss = 0.3840 [22.3 s]
Iteration 74 [109.3 s]: NDCG = 0.718632, loss = 0.3824 [21.8 s]
Iteration 75 [108.0 s]: NDCG = 0.718506, loss = 0.3812 [23.8 s]
Iteration 76 [110.1 s]: NDCG = 0.718493, loss = 0.3794 [22.1 s]
Iteration 77 [107.3 s]: NDCG = 0.718371, loss = 0.3779 [21.7 s]
Iteration 78 [109.7 s]: NDCG = 0.718320, loss = 0.3762 [23.5 s]
Iteration 79 [108.9 s]: NDCG = 0.718263, loss = 0.3747 [22.0 s]
Iteration 80 [109.6 s]: NDCG = 0.718200, loss = 0.3731 [21.6 s]
Iteration 81 [108.9 s]: NDCG = 0.718103, loss = 0.3716 [21.8 s]
Iteration 82 [108.9 s]: NDCG = 0.717912, loss = 0.3701 [21.8 s]
Iteration 83 [107.4 s]: NDCG = 0.717786, loss = 0.3687 [21.6 s]
Iteration 84 [107.9 s]: NDCG = 0.717799, loss = 0.3671 [22.1 s]
Iteration 85 [109.6 s]: NDCG = 0.717715, loss = 0.3658 [23.7 s]
Iteration 86 [110.4 s]: NDCG = 0.717792, loss = 0.3643 [21.8 s]
Iteration 87 [110.8 s]: NDCG = 0.717621, loss = 0.3629 [23.8 s]
Iteration 88 [111.2 s]: NDCG = 0.717632, loss = 0.3619 [22.8 s]


liurui@ubuntu:~/neural_collaborative_filtering$ KERAS_BACKEND=theano python NeuMF.py --learner adam --dataset yelp --reg_layers [0.00001,0.0002,0.001,0.005] --lr 0.00001
Using Theano backend.
NeuMF arguments: Namespace(batch_size=256, dataset='yelp', epochs=100, layers='[64,32,16,8]', learner='adam', lr=1e-05, mf_pretrain='', mlp_pretrain='', num_factors=8, num_neg=4, out=1, path='Data/', reg_layers='[0.00001,0.0002,0.001,0.005]', reg_mf=0, verbose=1) 
Load data done [7.4 s]. #user=13679, #item=12922, #train=323348, #test=316795
Init: NDCG = 0.689189
Iteration 0 [96.0 s]: NDCG = 0.713044, loss = 0.6814 [20.7 s]
Iteration 1 [92.2 s]: NDCG = 0.716090, loss = 0.5420 [19.4 s]
Iteration 2 [94.2 s]: NDCG = 0.716889, loss = 0.5023 [21.1 s]
Iteration 3 [98.3 s]: NDCG = 0.716621, loss = 0.4815 [21.8 s]
Iteration 4 [100.9 s]: NDCG = 0.716902, loss = 0.4715 [22.1 s]
Iteration 5 [101.8 s]: NDCG = 0.716632, loss = 0.4659 [22.3 s]
Iteration 6 [102.7 s]: NDCG = 0.716383, loss = 0.4621 [22.3 s]
Iteration 7 [104.1 s]: NDCG = 0.717128, loss = 0.4595 [22.2 s]
Iteration 8 [104.0 s]: NDCG = 0.716257, loss = 0.4577 [24.3 s]
Iteration 9 [109.3 s]: NDCG = 0.716532, loss = 0.4561 [27.2 s]
Iteration 10 [113.0 s]: NDCG = 0.716647, loss = 0.4548 [26.0 s]
Iteration 11 [113.2 s]: NDCG = 0.716867, loss = 0.4540 [23.3 s]
Iteration 12 [107.3 s]: NDCG = 0.717202, loss = 0.4531 [23.4 s]
Iteration 13 [107.0 s]: NDCG = 0.717300, loss = 0.4524 [22.0 s]
Iteration 14 [105.2 s]: NDCG = 0.717324, loss = 0.4520 [24.0 s]
Iteration 15 [104.2 s]: NDCG = 0.717669, loss = 0.4516 [21.9 s]
Iteration 16 [105.8 s]: NDCG = 0.717736, loss = 0.4505 [25.3 s]
Iteration 17 [109.8 s]: NDCG = 0.717875, loss = 0.4502 [24.2 s]
Iteration 18 [107.0 s]: NDCG = 0.717844, loss = 0.4499 [21.9 s]
Iteration 19 [104.0 s]: NDCG = 0.718292, loss = 0.4494 [22.0 s]
Iteration 20 [103.5 s]: NDCG = 0.718143, loss = 0.4492 [22.0 s]
Iteration 21 [114.3 s]: NDCG = 0.718223, loss = 0.4487 [23.5 s]
Iteration 22 [105.8 s]: NDCG = 0.718002, loss = 0.4484 [24.4 s]
Iteration 23 [113.7 s]: NDCG = 0.718339, loss = 0.4481 [24.6 s]
Iteration 24 [111.5 s]: NDCG = 0.718324, loss = 0.4474 [24.7 s]
Iteration 25 [113.0 s]: NDCG = 0.718522, loss = 0.4472 [24.6 s]
Iteration 26 [106.2 s]: NDCG = 0.718493, loss = 0.4468 [21.6 s]
Iteration 27 [104.6 s]: NDCG = 0.718670, loss = 0.4464 [23.4 s]
Iteration 28 [104.4 s]: NDCG = 0.718696, loss = 0.4459 [22.3 s]
Iteration 29 [104.8 s]: NDCG = 0.718810, loss = 0.4455 [22.5 s]
Iteration 30 [104.8 s]: NDCG = 0.718881, loss = 0.4451 [22.4 s]
Iteration 31 [105.5 s]: NDCG = 0.718911, loss = 0.4443 [22.2 s]
Iteration 32 [104.5 s]: NDCG = 0.719141, loss = 0.4438 [22.4 s]
Iteration 33 [105.0 s]: NDCG = 0.719114, loss = 0.4429 [22.2 s]
Iteration 34 [106.7 s]: NDCG = 0.719250, loss = 0.4422 [25.3 s]
Iteration 35 [109.4 s]: NDCG = 0.719203, loss = 0.4416 [25.1 s]
Iteration 36 [109.2 s]: NDCG = 0.719081, loss = 0.4406 [23.9 s]
Iteration 37 [104.5 s]: NDCG = 0.719108, loss = 0.4399 [22.2 s]
Iteration 38 [104.5 s]: NDCG = 0.719153, loss = 0.4390 [22.2 s]
Iteration 39 [104.3 s]: NDCG = 0.719341, loss = 0.4381 [22.3 s]
Iteration 40 [104.1 s]: NDCG = 0.719222, loss = 0.4371 [22.4 s]
Iteration 41 [104.3 s]: NDCG = 0.719264, loss = 0.4358 [22.2 s]
Iteration 42 [104.2 s]: NDCG = 0.719345, loss = 0.4349 [22.0 s]
Iteration 43 [104.2 s]: NDCG = 0.719171, loss = 0.4337 [22.0 s]
Iteration 44 [104.4 s]: NDCG = 0.719242, loss = 0.4323 [22.0 s]
Iteration 45 [104.1 s]: NDCG = 0.719420, loss = 0.4312 [22.0 s]
Iteration 46 [105.6 s]: NDCG = 0.719311, loss = 0.4294 [23.2 s]
Iteration 47 [106.9 s]: NDCG = 0.719383, loss = 0.4282 [22.3 s]
Iteration 48 [104.3 s]: NDCG = 0.719450, loss = 0.4268 [22.9 s]
Iteration 49 [104.5 s]: NDCG = 0.719423, loss = 0.4255 [22.1 s]
Iteration 50 [105.6 s]: NDCG = 0.719527, loss = 0.4240 [22.7 s]
Iteration 51 [105.4 s]: NDCG = 0.719633, loss = 0.4226 [22.5 s]
Iteration 52 [104.2 s]: NDCG = 0.719704, loss = 0.4209 [21.8 s]
Iteration 53 [103.5 s]: NDCG = 0.719599, loss = 0.4195 [21.9 s]
Iteration 54 [103.7 s]: NDCG = 0.719642, loss = 0.4176 [21.7 s]
Iteration 55 [104.3 s]: NDCG = 0.719646, loss = 0.4163 [21.8 s]
Iteration 56 [103.8 s]: NDCG = 0.719644, loss = 0.4143 [21.7 s]
Iteration 57 [103.8 s]: NDCG = 0.719575, loss = 0.4127 [21.7 s]
Iteration 58 [103.7 s]: NDCG = 0.719709, loss = 0.4111 [21.8 s]
Iteration 59 [104.3 s]: NDCG = 0.719529, loss = 0.4093 [21.8 s]
Iteration 60 [103.5 s]: NDCG = 0.719506, loss = 0.4073 [21.6 s]
Iteration 61 [103.9 s]: NDCG = 0.719464, loss = 0.4055 [21.6 s]
Iteration 62 [104.1 s]: NDCG = 0.719487, loss = 0.4040 [21.7 s]
Iteration 63 [103.6 s]: NDCG = 0.719482, loss = 0.4023 [21.6 s]
Iteration 64 [103.1 s]: NDCG = 0.719411, loss = 0.4007 [21.7 s]
Iteration 65 [103.4 s]: NDCG = 0.719368, loss = 0.3986 [21.8 s]
Iteration 66 [103.3 s]: NDCG = 0.719343, loss = 0.3969 [22.0 s]
Iteration 67 [103.6 s]: NDCG = 0.719248, loss = 0.3951 [21.8 s]
Iteration 68 [103.4 s]: NDCG = 0.719272, loss = 0.3935 [21.9 s]
Iteration 69 [103.7 s]: NDCG = 0.719292, loss = 0.3916 [21.6 s]
Iteration 70 [103.3 s]: NDCG = 0.719205, loss = 0.3899 [21.7 s]
Iteration 71 [103.4 s]: NDCG = 0.718998, loss = 0.3881 [21.7 s]
Iteration 72 [103.5 s]: NDCG = 0.718811, loss = 0.3866 [21.7 s]
Iteration 73 [104.6 s]: NDCG = 0.718838, loss = 0.3849 [21.8 s]
Iteration 74 [103.4 s]: NDCG = 0.718784, loss = 0.3831 [21.8 s]
Iteration 75 [103.6 s]: NDCG = 0.718793, loss = 0.3814 [22.2 s]
Iteration 76 [104.0 s]: NDCG = 0.718838, loss = 0.3797 [21.8 s]
Iteration 77 [104.0 s]: NDCG = 0.718855, loss = 0.3781 [21.8 s]
Iteration 78 [103.4 s]: NDCG = 0.718820, loss = 0.3763 [21.6 s]
Iteration 79 [103.6 s]: NDCG = 0.718797, loss = 0.3746 [21.6 s]
Iteration 80 [103.5 s]: NDCG = 0.718908, loss = 0.3729 [21.7 s]
Iteration 81 [103.6 s]: NDCG = 0.718930, loss = 0.3716 [21.7 s]
Iteration 82 [103.3 s]: NDCG = 0.718790, loss = 0.3698 [21.6 s]





